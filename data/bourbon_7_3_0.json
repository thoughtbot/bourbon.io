[
  {
    "description": "A list of all HTML button elements.\n\n",
    "commentRange": {
      "start": 3,
      "end": 7
    },
    "context": {
      "type": "variable",
      "name": "_buttons-list",
      "value": "(\n  \"button\",\n  \"[type='button']\",\n  \"[type='reset']\",\n  \"[type='submit']\",\n)",
      "scope": "private",
      "line": {
        "start": 9,
        "end": 14
      }
    },
    "type": "list",
    "access": "private",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/helpers/_buttons-list.scss",
      "name": "_buttons-list.scss"
    },
    "usedBy": [
      {
        "description": "A list of all HTML button elements. Please note that you must interpolate\nthe variable (`#{}`) to use it as a selector.\n\n",
        "context": {
          "type": "variable",
          "name": "all-buttons",
          "value": "_assign-inputs($_buttons-list)",
          "scope": "private",
          "line": {
            "start": 27,
            "end": 27
          }
        }
      },
      {
        "description": "A list of all HTML button elements with the `:active` pseudo-class applied.\nPlease note that you must interpolate the variable (`#{}`) to use it as a\nselector.\n\n",
        "context": {
          "type": "variable",
          "name": "all-buttons-active",
          "value": "_assign-inputs($_buttons-list, active)",
          "scope": "private",
          "line": {
            "start": 46,
            "end": 46
          }
        }
      },
      {
        "description": "A list of all HTML button elements with the `:focus` pseudo-class applied.\nPlease note that you must interpolate the variable (`#{}`) to use it as a\nselector.\n\n",
        "context": {
          "type": "variable",
          "name": "all-buttons-focus",
          "value": "_assign-inputs($_buttons-list, focus)",
          "scope": "private",
          "line": {
            "start": 65,
            "end": 65
          }
        }
      },
      {
        "description": "A list of all HTML button elements with the `:hover` pseudo-class applied.\nPlease note that you must interpolate the variable (`#{}`) to use it as a\nselector.\n\n",
        "context": {
          "type": "variable",
          "name": "all-buttons-hover",
          "value": "_assign-inputs($_buttons-list, hover)",
          "scope": "private",
          "line": {
            "start": 84,
            "end": 84
          }
        }
      }
    ]
  },
  {
    "description": "A list of all _text-based_ HTML inputs.\n\n",
    "commentRange": {
      "start": 3,
      "end": 7
    },
    "context": {
      "type": "variable",
      "name": "_text-inputs-list",
      "value": "(\n  \"[type='color']\",\n  \"[type='date']\",\n  \"[type='datetime']\",\n  \"[type='datetime-local']\",\n  \"[type='email']\",\n  \"[type='month']\",\n  \"[type='number']\",\n  \"[type='password']\",\n  \"[type='search']\",\n  \"[type='tel']\",\n  \"[type='text']\",\n  \"[type='time']\",\n  \"[type='url']\",\n  \"[type='week']\",\n  \"input:not([type])\",\n  \"textarea\",\n)",
      "scope": "private",
      "line": {
        "start": 9,
        "end": 26
      }
    },
    "type": "list",
    "access": "private",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/helpers/_text-inputs-list.scss",
      "name": "_text-inputs-list.scss"
    },
    "usedBy": [
      {
        "description": "A list of all _text-based_ HTML inputs. Please note that you must\ninterpolate the variable (`#{}`) to use it as a selector.\n\n",
        "context": {
          "type": "variable",
          "name": "all-text-inputs",
          "value": "_assign-inputs($_text-inputs-list)",
          "scope": "private",
          "line": {
            "start": 39,
            "end": 39
          }
        }
      },
      {
        "description": "A list of all _text-based_ HTML inputs with the `:active` pseudo-class\napplied. Please note that you must interpolate the variable (`#{}`) to use\nit as a selector.\n\n",
        "context": {
          "type": "variable",
          "name": "all-text-inputs-active",
          "value": "_assign-inputs($_text-inputs-list, active)",
          "scope": "private",
          "line": {
            "start": 70,
            "end": 70
          }
        }
      },
      {
        "description": "A list of all _text-based_ HTML inputs with the `:focus` pseudo-class\napplied. Please note that you must interpolate the variable (`#{}`) to use\nit as a selector.\n\n",
        "context": {
          "type": "variable",
          "name": "all-text-inputs-focus",
          "value": "_assign-inputs($_text-inputs-list, focus)",
          "scope": "private",
          "line": {
            "start": 101,
            "end": 101
          }
        }
      },
      {
        "description": "A list of all _text-based_ HTML inputs with the `:hover` pseudo-class\napplied. Please note that you must interpolate the variable (`#{}`) to use\nit as a selector.\n\n",
        "context": {
          "type": "variable",
          "name": "all-text-inputs-hover",
          "value": "_assign-inputs($_text-inputs-list, hover)",
          "scope": "private",
          "line": {
            "start": 132,
            "end": 132
          }
        }
      },
      {
        "description": "A list of all _text-based_ HTML inputs with the `:invalid` pseudo-class\napplied. Please note that you must interpolate the variable (`#{}`) to use\nit as a selector.\n\n",
        "context": {
          "type": "variable",
          "name": "all-text-inputs-invalid",
          "value": "_assign-inputs($_text-inputs-list, invalid)",
          "scope": "private",
          "line": {
            "start": 163,
            "end": 163
          }
        }
      }
    ]
  },
  {
    "description": "Provides a concise, one-line method for setting `border-color` on specific\nedges of a box. Use a `null` value to “skip” edges of the box with standard\nCSS shorthand.\n\n",
    "commentRange": {
      "start": 3,
      "end": 22
    },
    "context": {
      "type": "mixin",
      "name": "border-color",
      "code": "\n  @include _directional-property(border, color, $values);\n",
      "line": {
        "start": 24,
        "end": 26
      }
    },
    "parameter": [
      {
        "type": "list",
        "name": "values",
        "description": "List of colors; accepts CSS shorthand.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include border-color(#a60b55 #76cd9c null #e8ae1a);\n}\n\n// CSS Output\n.element {\n  border-left-color: #e8ae1a;\n  border-right-color: #76cd9c;\n  border-top-color: #a60b55;\n}"
      }
    ],
    "require": [
      {
        "type": "mixin",
        "name": "_directional-property",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_border-color.scss",
      "name": "_border-color.scss"
    }
  },
  {
    "description": "Provides a concise, one-line method for setting `border-radius` on both the\ntop-left and top-right of a box.\n\n",
    "commentRange": {
      "start": 3,
      "end": 17
    },
    "context": {
      "type": "mixin",
      "name": "border-top-radius",
      "code": "\n  border-top-left-radius: $radii;\n  border-top-right-radius: $radii;\n",
      "line": {
        "start": 19,
        "end": 22
      }
    },
    "parameter": [
      {
        "type": "number (with unit)",
        "name": "radii"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include border-top-radius(4px);\n}\n\n// CSS Output\n.element {\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "bourbon/library/_border-radius.scss",
      "name": "_border-radius.scss"
    }
  },
  {
    "description": "Provides a concise, one-line method for setting `border-radius` on both the\ntop-right and bottom-right of a box.\n\n",
    "commentRange": {
      "start": 24,
      "end": 38
    },
    "context": {
      "type": "mixin",
      "name": "border-right-radius",
      "code": "\n  border-bottom-right-radius: $radii;\n  border-top-right-radius: $radii;\n",
      "line": {
        "start": 40,
        "end": 43
      }
    },
    "parameter": [
      {
        "type": "number (with unit)",
        "name": "radii"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include border-right-radius(3px);\n}\n\n// CSS Output\n.element {\n  border-bottom-right-radius: 3px;\n  border-top-right-radius: 3px;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "bourbon/library/_border-radius.scss",
      "name": "_border-radius.scss"
    }
  },
  {
    "description": "Provides a concise, one-line method for setting `border-radius` on both the\nbottom-left and bottom-right of a box.\n\n",
    "commentRange": {
      "start": 45,
      "end": 59
    },
    "context": {
      "type": "mixin",
      "name": "border-bottom-radius",
      "code": "\n  border-bottom-left-radius: $radii;\n  border-bottom-right-radius: $radii;\n",
      "line": {
        "start": 61,
        "end": 64
      }
    },
    "parameter": [
      {
        "type": "number (with unit)",
        "name": "radii"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include border-bottom-radius(2px);\n}\n\n// CSS Output\n.element {\n  border-bottom-left-radius: 2px;\n  border-bottom-right-radius: 2px;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "bourbon/library/_border-radius.scss",
      "name": "_border-radius.scss"
    }
  },
  {
    "description": "Provides a concise, one-line method for setting `border-radius` on both the\ntop-left and bottom-left of a box.\n\n",
    "commentRange": {
      "start": 66,
      "end": 80
    },
    "context": {
      "type": "mixin",
      "name": "border-left-radius",
      "code": "\n  border-bottom-left-radius: $radii;\n  border-top-left-radius: $radii;\n",
      "line": {
        "start": 82,
        "end": 85
      }
    },
    "parameter": [
      {
        "type": "number (with unit)",
        "name": "radii"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include border-left-radius(1px);\n}\n\n// CSS Output\n.element {\n  border-bottom-left-radius: 1px;\n  border-top-left-radius: 1px;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "bourbon/library/_border-radius.scss",
      "name": "_border-radius.scss"
    }
  },
  {
    "description": "Provides a concise, one-line method for setting `border-style` on specific\nedges of a box. Use a `null` value to “skip” edges of the box with standard\nCSS shorthand.\n\n",
    "commentRange": {
      "start": 3,
      "end": 21
    },
    "context": {
      "type": "mixin",
      "name": "border-style",
      "code": "\n  @include _directional-property(border, style, $values);\n",
      "line": {
        "start": 23,
        "end": 25
      }
    },
    "parameter": [
      {
        "type": "list",
        "name": "values",
        "description": "List of border styles; accepts CSS shorthand.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include border-style(dashed null solid);\n}\n\n// CSS Output\n.element {\n  border-bottom-style: solid;\n  border-top-style: dashed;\n}"
      }
    ],
    "require": [
      {
        "type": "mixin",
        "name": "_directional-property",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_border-style.scss",
      "name": "_border-style.scss"
    }
  },
  {
    "description": "Provides a concise, one-line method for setting `border-width` on specific\nedges of a box. Use a `null` value to “skip” edges of the box with standard\nCSS shorthand.\n\n",
    "commentRange": {
      "start": 3,
      "end": 21
    },
    "context": {
      "type": "mixin",
      "name": "border-width",
      "code": "\n  @include _directional-property(border, width, $values);\n",
      "line": {
        "start": 23,
        "end": 25
      }
    },
    "parameter": [
      {
        "type": "list",
        "name": "values",
        "description": "List of border widths; accepts CSS shorthand.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include border-width(1em null 20px);\n}\n\n// CSS Output\n.element {\n  border-bottom-width: 20px;\n  border-top-width: 1em;\n}"
      }
    ],
    "require": [
      {
        "type": "mixin",
        "name": "_directional-property",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_border-width.scss",
      "name": "_border-width.scss"
    }
  },
  {
    "description": "A list of all HTML button elements. Please note that you must interpolate\nthe variable (`#{}`) to use it as a selector.\n\n",
    "commentRange": {
      "start": 11,
      "end": 25
    },
    "context": {
      "type": "variable",
      "name": "all-buttons",
      "value": "_assign-inputs($_buttons-list)",
      "scope": "private",
      "line": {
        "start": 27,
        "end": 27
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "#{$all-buttons} {\n  background-color: #f00;\n}\n\n// CSS Output\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  background-color: #f00;\n}"
      }
    ],
    "type": "list",
    "require": [
      {
        "type": "function",
        "name": "_assign-inputs",
        "external": false
      },
      {
        "type": "variable",
        "name": "_buttons-list",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_buttons.scss",
      "name": "_buttons.scss"
    }
  },
  {
    "description": "A list of all HTML button elements with the `:active` pseudo-class applied.\nPlease note that you must interpolate the variable (`#{}`) to use it as a\nselector.\n\n",
    "commentRange": {
      "start": 29,
      "end": 44
    },
    "context": {
      "type": "variable",
      "name": "all-buttons-active",
      "value": "_assign-inputs($_buttons-list, active)",
      "scope": "private",
      "line": {
        "start": 46,
        "end": 46
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "#{$all-buttons-active} {\n  background-color: #00f;\n}\n\n// CSS Output\nbutton:active,\n[type='button']:active,\n[type='reset']:active,\n[type='submit']:active {\n  background-color: #00f;\n}"
      }
    ],
    "type": "list",
    "require": [
      {
        "type": "function",
        "name": "_assign-inputs",
        "external": false
      },
      {
        "type": "variable",
        "name": "_buttons-list",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_buttons.scss",
      "name": "_buttons.scss"
    }
  },
  {
    "description": "A list of all HTML button elements with the `:focus` pseudo-class applied.\nPlease note that you must interpolate the variable (`#{}`) to use it as a\nselector.\n\n",
    "commentRange": {
      "start": 48,
      "end": 63
    },
    "context": {
      "type": "variable",
      "name": "all-buttons-focus",
      "value": "_assign-inputs($_buttons-list, focus)",
      "scope": "private",
      "line": {
        "start": 65,
        "end": 65
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "#{$all-buttons-focus} {\n  background-color: #0f0;\n}\n\n// CSS Output\nbutton:focus,\n[type='button']:focus,\n[type='reset']:focus,\n[type='submit']:focus {\n  background-color: #0f0;\n}"
      }
    ],
    "type": "list",
    "require": [
      {
        "type": "function",
        "name": "_assign-inputs",
        "external": false
      },
      {
        "type": "variable",
        "name": "_buttons-list",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_buttons.scss",
      "name": "_buttons.scss"
    }
  },
  {
    "description": "A list of all HTML button elements with the `:hover` pseudo-class applied.\nPlease note that you must interpolate the variable (`#{}`) to use it as a\nselector.\n\n",
    "commentRange": {
      "start": 67,
      "end": 82
    },
    "context": {
      "type": "variable",
      "name": "all-buttons-hover",
      "value": "_assign-inputs($_buttons-list, hover)",
      "scope": "private",
      "line": {
        "start": 84,
        "end": 84
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "#{$all-buttons-hover} {\n  background-color: #0f0;\n}\n\n// CSS Output\nbutton:hover,\n[type='button']:hover,\n[type='reset']:hover,\n[type='submit']:hover {\n  background-color: #0f0;\n}"
      }
    ],
    "type": "list",
    "require": [
      {
        "type": "function",
        "name": "_assign-inputs",
        "external": false
      },
      {
        "type": "variable",
        "name": "_buttons-list",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_buttons.scss",
      "name": "_buttons.scss"
    }
  },
  {
    "description": "Provides an easy way to include a clearfix for containing floats.\n\n",
    "commentRange": {
      "start": 3,
      "end": 17
    },
    "context": {
      "type": "mixin",
      "name": "clearfix",
      "code": "\n  &::after {\n    clear: both;\n    content: \"\";\n    display: block;\n  }\n",
      "line": {
        "start": 19,
        "end": 25
      }
    },
    "link": [
      {
        "url": "https://goo.gl/yP5hiZ",
        "caption": ""
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include clearfix;\n}\n\n// CSS Output\n.element::after {\n  clear: both;\n  content: \"\";\n  display: block;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_clearfix.scss",
      "name": "_clearfix.scss"
    }
  },
  {
    "description": "Switches between two colors based on the contrast to another color. It’s\nlike a [ternary operator] for color contrast and can be useful for building\na button system.\n\nThe calculation of the contrast ratio is based on the [WCAG 2.0\nspecification]. However, we cannot guarantee full compliance, though all of\nour manual testing passed.\n\n  [ternary operator]: https://goo.gl/ccfLqi\n  [WCAG 2.0 specification]: https://goo.gl/zhQuYA\n\n",
    "commentRange": {
      "start": 3,
      "end": 58
    },
    "context": {
      "type": "function",
      "name": "contrast-switch",
      "code": "\n  @if not _is-color($base-color) {\n    @error \"`#{$base-color}` is not a valid color for the `$base-color` \" +\n      \"argument in the `contrast-switch` function.\";\n  } @else if not _is-color($dark-color) {\n    @error \"`#{$dark-color}` is not a valid color for the `$dark-color` \" +\n      \"argument in the `contrast-switch` function.\";\n  } @else if not _is-color($light-color) {\n    @error \"`#{$light-color}` is not a valid color for the `$light-color` \" +\n      \"argument in the `contrast-switch` function.\";\n  } @else {\n    $-contrast-to-dark: _contrast-ratio($base-color, $dark-color);\n    $-contrast-to-light: _contrast-ratio($base-color, $light-color);\n    $-prefer-dark: $-contrast-to-dark >= $-contrast-to-light;\n\n    @return if($-prefer-dark, $dark-color, $light-color);\n  }\n",
      "line": {
        "start": 60,
        "end": 81
      }
    },
    "parameter": [
      {
        "type": "color",
        "name": "base-color",
        "description": "The color to evaluate lightness against.\n"
      },
      {
        "type": "color",
        "name": "dark-color",
        "default": "#000",
        "description": "The color to be output when `$base-color` is light. Can also be set\n  globally using the `contrast-switch-dark-color` key in the\n  Bourbon settings.\n"
      },
      {
        "type": "color",
        "name": "light-color",
        "default": "#fff",
        "description": "The color to be output when `$base-color` is dark. Can also be set\n  globally using the `contrast-switch-light-color` key in the\n  Bourbon settings.\n"
      }
    ],
    "return": {
      "type": "color"
    },
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  color: contrast-switch(#bae6e6);\n}\n\n// CSS Output\n.element {\n  color: #000;\n}"
      },
      {
        "type": "scss",
        "code": ".element {\n  $button-color: #2d72d9;\n  background-color: $button-color;\n  color: contrast-switch($button-color, #222, #eee);\n}\n\n// CSS Output\n.element {\n  background-color: #2d72d9;\n  color: #eee;\n}"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "_fetch-bourbon-setting",
        "external": false
      },
      {
        "type": "function",
        "name": "_is-color",
        "external": false
      },
      {
        "type": "function",
        "name": "_contrast-ratio",
        "external": false
      }
    ],
    "since": [
      {
        "version": "5.0.0"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "throw": [
      "`#{$base-color}` is not a valid color for the `$base-color` ",
      "`#{$dark-color}` is not a valid color for the `$dark-color` ",
      "`#{$light-color}` is not a valid color for the `$light-color` "
    ],
    "file": {
      "path": "bourbon/library/_contrast-switch.scss",
      "name": "_contrast-switch.scss"
    }
  },
  {
    "description": "Truncates text and adds an ellipsis to represent overflow.\n\n",
    "commentRange": {
      "start": 3,
      "end": 24
    },
    "context": {
      "type": "mixin",
      "name": "ellipsis",
      "code": "\n  display: $display;\n  max-width: $width;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  word-wrap: normal;\n",
      "line": {
        "start": 26,
        "end": 36
      }
    },
    "parameter": [
      {
        "type": "number",
        "name": "width",
        "default": "100%",
        "description": "The `max-width` for the string to respect before being truncated.\n"
      },
      {
        "type": "string",
        "name": "display",
        "default": "inline-block",
        "description": "Sets the display-value of the element.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include ellipsis;\n}\n\n// CSS Output\n.element {\n  display: inline-block;\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  word-wrap: normal;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "bourbon/library/_ellipsis.scss",
      "name": "_ellipsis.scss"
    }
  },
  {
    "description": "Generates an `@font-face` declaration. You can choose the specific file\nformats you need to output; the mixin supports `woff2`\nand `woff`. The mixin also supports usage with the Rails Asset Pipeline,\nwhich you can enable per use, or globally in the `$bourbon()` settings.\n\n",
    "commentRange": {
      "start": 3,
      "end": 47
    },
    "context": {
      "type": "mixin",
      "name": "font-face",
      "code": "\n  @font-face {\n    font-family: $font-family;\n    src: _font-source-declaration(\n      $font-family,\n      $file-path,\n      $asset-pipeline,\n      $file-formats\n    );\n    @content;\n  }\n",
      "line": {
        "start": 49,
        "end": 65
      }
    },
    "parameter": [
      {
        "type": "string",
        "name": "font-family"
      },
      {
        "type": "string",
        "name": "file-path"
      },
      {
        "type": "string | list",
        "name": "file-formats",
        "default": "(\"woff2\", \"woff\")",
        "description": "List of the font file formats to include. Can also be set globally using\n  the `global-font-file-formats` key in the Bourbon settings.\n"
      },
      {
        "type": "boolean",
        "name": "asset-pipeline",
        "default": "false",
        "description": "Set to `true` if you’re using the Rails Asset Pipeline (place the fonts\n  in `app/assets/fonts/`). Can also be set globally using the\n  `rails-asset-pipeline` key in the Bourbon settings.\n"
      }
    ],
    "content": "Any additional CSS properties that are included in the `@include`\n  directive will be output within the `@font-face` declaration, e.g. you can\n  pass in `font-weight`, `font-style` and/or `unicode-range`.",
    "example": [
      {
        "type": "scss",
        "code": "@include font-face(\n  \"source-sans-pro\",\n  \"fonts/source-sans-pro-regular\",\n  (\"woff2\", \"woff\")\n) {\n  font-style: normal;\n  font-weight: 400;\n}\n\n// CSS Output\n@font-face {\n  font-family: \"source-sans-pro\";\n  src: url(\"fonts/source-sans-pro-regular.woff2\") format(\"woff2\"),\n       url(\"fonts/source-sans-pro-regular.woff\") format(\"woff\");\n  font-style: normal;\n  font-weight: 400;\n}"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "_font-source-declaration",
        "external": false
      },
      {
        "type": "function",
        "name": "_fetch-bourbon-setting",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_font-face.scss",
      "name": "_font-face.scss"
    }
  },
  {
    "description": "A variable that outputs a Helvetica font stack.\n\n",
    "commentRange": {
      "start": 3,
      "end": 17
    },
    "context": {
      "type": "variable",
      "name": "font-stack-helvetica",
      "value": "(\n  \"Helvetica Neue\",\n  \"Helvetica\",\n  \"Arial\",\n  sans-serif,\n)",
      "scope": "private",
      "line": {
        "start": 19,
        "end": 24
      }
    },
    "link": [
      {
        "url": "https://goo.gl/uSJvZe",
        "caption": ""
      }
    ],
    "type": "list",
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  font-family: $font-stack-helvetica;\n}\n\n// CSS Output\n.element {\n  font-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_font-stacks.scss",
      "name": "_font-stacks.scss"
    }
  },
  {
    "description": "A variable that outputs a Lucida Grande font stack.\n\n",
    "commentRange": {
      "start": 26,
      "end": 40
    },
    "context": {
      "type": "variable",
      "name": "font-stack-lucida-grande",
      "value": "(\n  \"Lucida Grande\",\n  \"Lucida Sans Unicode\",\n  \"Geneva\",\n  \"Verdana\",\n  sans-serif,\n)",
      "scope": "private",
      "line": {
        "start": 42,
        "end": 48
      }
    },
    "link": [
      {
        "url": "https://goo.gl/R5UyYE",
        "caption": ""
      }
    ],
    "type": "list",
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  font-family: $font-stack-lucida-grande;\n}\n\n// CSS Output\n.element {\n  font-family: \"Lucida Grande\", \"Lucida Sans Unicode\", \"Geneva\", \"Verdana\", sans-serif;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_font-stacks.scss",
      "name": "_font-stacks.scss"
    }
  },
  {
    "description": "A variable that outputs a Verdana font stack.\n\n",
    "commentRange": {
      "start": 50,
      "end": 64
    },
    "context": {
      "type": "variable",
      "name": "font-stack-verdana",
      "value": "(\n  \"Verdana\",\n  \"Geneva\",\n  sans-serif,\n)",
      "scope": "private",
      "line": {
        "start": 66,
        "end": 70
      }
    },
    "link": [
      {
        "url": "https://goo.gl/yGXWSS",
        "caption": ""
      }
    ],
    "type": "list",
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  font-family: $font-stack-verdana;\n}\n\n// CSS Output\n.element {\n  font-family: \"Verdana\", \"Geneva\", sans-serif;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_font-stacks.scss",
      "name": "_font-stacks.scss"
    }
  },
  {
    "description": "A variable that outputs a system font stack.\n\n",
    "commentRange": {
      "start": 72,
      "end": 84
    },
    "context": {
      "type": "variable",
      "name": "font-stack-system",
      "value": "(\n  system-ui,\n  -apple-system,\n  BlinkMacSystemFont,\n  \"Avenir Next\",\n  \"Avenir\",\n  \"Segoe UI\",\n  \"Lucida Grande\",\n  \"Helvetica Neue\",\n  \"Helvetica\",\n  \"Fira Sans\",\n  \"Roboto\",\n  \"Noto\",\n  \"Droid Sans\",\n  \"Cantarell\",\n  \"Oxygen\",\n  \"Ubuntu\",\n  \"Franklin Gothic Medium\",\n  \"Century Gothic\",\n  \"Liberation Sans\",\n  sans-serif,\n)",
      "scope": "private",
      "line": {
        "start": 86,
        "end": 107
      }
    },
    "type": "list",
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  font-family: $font-stack-system;\n}\n\n// CSS Output\n.element {\n  font-family: system-ui, -apple-system, BlinkMacSystemFont, \"Avenir Next\", \"Avenir\", \"Segoe UI\", \"Lucida Grande\", \"Helvetica Neue\", \"Helvetica\", \"Fira Sans\", \"Roboto\", \"Noto\", \"Droid Sans\", \"Cantarell\", \"Oxygen\", \"Ubuntu\", \"Franklin Gothic Medium\", \"Century Gothic\", \"Liberation Sans\", sans-serif;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_font-stacks.scss",
      "name": "_font-stacks.scss"
    }
  },
  {
    "description": "A variable that outputs a Garamond font stack.\n\n",
    "commentRange": {
      "start": 109,
      "end": 123
    },
    "context": {
      "type": "variable",
      "name": "font-stack-garamond",
      "value": "(\n  \"Garamond\",\n  \"Baskerville\",\n  \"Baskerville Old Face\",\n  \"Hoefler Text\",\n  \"Times New Roman\",\n  serif,\n)",
      "scope": "private",
      "line": {
        "start": 125,
        "end": 132
      }
    },
    "link": [
      {
        "url": "https://goo.gl/QQFEkV",
        "caption": ""
      }
    ],
    "type": "list",
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  font-family: $font-stack-garamond;\n}\n\n// CSS Output\n.element {\n  font-family: \"Garamond\", \"Baskerville\", \"Baskerville Old Face\", \"Hoefler Text\", \"Times New Roman\", serif;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_font-stacks.scss",
      "name": "_font-stacks.scss"
    }
  },
  {
    "description": "A variable that outputs a Georgia font stack.\n\n",
    "commentRange": {
      "start": 134,
      "end": 148
    },
    "context": {
      "type": "variable",
      "name": "font-stack-georgia",
      "value": "(\n  \"Georgia\",\n  \"Times\",\n  \"Times New Roman\",\n  serif,\n)",
      "scope": "private",
      "line": {
        "start": 150,
        "end": 155
      }
    },
    "link": [
      {
        "url": "https://goo.gl/wtzVPy",
        "caption": ""
      }
    ],
    "type": "list",
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  font-family: $font-stack-georgia;\n}\n\n// CSS Output\n.element {\n  font-family: \"Georgia\", \"Times\", \"Times New Roman\", serif;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_font-stacks.scss",
      "name": "_font-stacks.scss"
    }
  },
  {
    "description": "A variable that outputs a Hoefler Text font stack.\n\n",
    "commentRange": {
      "start": 157,
      "end": 171
    },
    "context": {
      "type": "variable",
      "name": "font-stack-hoefler-text",
      "value": "(\n  \"Hoefler Text\",\n  \"Baskerville Old Face\",\n  \"Garamond\",\n  \"Times New Roman\",\n  serif,\n)",
      "scope": "private",
      "line": {
        "start": 173,
        "end": 179
      }
    },
    "link": [
      {
        "url": "https://goo.gl/n7U7zx",
        "caption": ""
      }
    ],
    "type": "list",
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  font-family: $font-stack-hoefler-text;\n}\n\n// CSS Output\n.element {\n  font-family: \"Hoefler Text\", \"Baskerville Old Face\", \"Garamond\", \"Times New Roman\", serif;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_font-stacks.scss",
      "name": "_font-stacks.scss"
    }
  },
  {
    "description": "A variable that outputs a Consolas font stack.\n\n",
    "commentRange": {
      "start": 181,
      "end": 195
    },
    "context": {
      "type": "variable",
      "name": "font-stack-consolas",
      "value": "(\n  \"Consolas\",\n  \"monaco\",\n  monospace,\n)",
      "scope": "private",
      "line": {
        "start": 197,
        "end": 201
      }
    },
    "link": [
      {
        "url": "https://goo.gl/iKrtqv",
        "caption": ""
      }
    ],
    "type": "list",
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  font-family: $font-stack-consolas;\n}\n\n// CSS Output\n.element {\n  font-family: \"Consolas\", \"monaco\", monospace;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_font-stacks.scss",
      "name": "_font-stacks.scss"
    }
  },
  {
    "description": "A variable that outputs a Courier New font stack.\n\n",
    "commentRange": {
      "start": 203,
      "end": 217
    },
    "context": {
      "type": "variable",
      "name": "font-stack-courier-new",
      "value": "(\n  \"Courier New\",\n  \"Courier\",\n  \"Lucida Sans Typewriter\",\n  \"Lucida Typewriter\",\n  monospace,\n)",
      "scope": "private",
      "line": {
        "start": 219,
        "end": 225
      }
    },
    "link": [
      {
        "url": "https://goo.gl/bHfWMP",
        "caption": ""
      }
    ],
    "type": "list",
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  font-family: $font-stack-courier-new;\n}\n\n// CSS Output\n.element {\n  font-family: \"Courier New\", \"Courier\", \"Lucida Sans Typewriter\", \"Lucida Typewriter\", monospace;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_font-stacks.scss",
      "name": "_font-stacks.scss"
    }
  },
  {
    "description": "A variable that outputs a Monaco font stack.\n\n",
    "commentRange": {
      "start": 227,
      "end": 241
    },
    "context": {
      "type": "variable",
      "name": "font-stack-monaco",
      "value": "(\n  \"Monaco\",\n  \"Consolas\",\n  \"Lucida Console\",\n  monospace,\n)",
      "scope": "private",
      "line": {
        "start": 243,
        "end": 248
      }
    },
    "link": [
      {
        "url": "https://goo.gl/9PgKDO",
        "caption": ""
      }
    ],
    "type": "list",
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  font-family: $font-stack-monaco;\n}\n\n// CSS Output\n.element {\n  font-family: \"Monaco\", \"Consolas\", \"Lucida Console\", monospace;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_font-stacks.scss",
      "name": "_font-stacks.scss"
    }
  },
  {
    "description": "Hides the text in an element, commonly used to show an image instead. Some\nelements will need block-level styles applied.\n\n",
    "commentRange": {
      "start": 3,
      "end": 18
    },
    "context": {
      "type": "mixin",
      "name": "hide-text",
      "code": "\n  overflow: hidden;\n  text-indent: 101%;\n  white-space: nowrap;\n",
      "line": {
        "start": 20,
        "end": 24
      }
    },
    "link": [
      {
        "url": "https://goo.gl/EvLRIu",
        "caption": ""
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include hide-text;\n}\n\n// CSS Output\n.element {\n  overflow: hidden;\n  text-indent: 101%;\n  white-space: nowrap;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_hide-text.scss",
      "name": "_hide-text.scss"
    }
  },
  {
    "description": "Hides an element visually while still allowing the content to be accessible\nto assistive technology, e.g. screen readers. Passing `unhide` will reverse\nthe affects of the hiding, which is handy for showing the element on focus,\nfor example.\n\n",
    "commentRange": {
      "start": 3,
      "end": 45
    },
    "context": {
      "type": "mixin",
      "name": "hide-visually",
      "code": "\n  @if not index(\"hide\" \"unhide\", $toggle) {\n    @error \"`#{$toggle}` is not a valid value for the `$toggle` argument in \" +\n      \"the `hide-visually` mixin. Must be either `hide` or `unhide`.\";\n  } @else if $toggle == \"hide\" {\n    border: 0;\n    clip: rect(1px, 1px, 1px, 1px);\n    clip-path: inset(100%);\n    height: 1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    white-space: nowrap;\n    width: 1px;\n  } @else if $toggle == \"unhide\" {\n    clip: auto;\n    clip-path: none;\n    height: auto;\n    overflow: visible;\n    position: static;\n    white-space: inherit;\n    width: auto;\n  }\n",
      "line": {
        "start": 47,
        "end": 70
      }
    },
    "link": [
      {
        "url": "https://goo.gl/Vf1TGn",
        "caption": ""
      }
    ],
    "parameter": [
      {
        "type": "string",
        "name": "toggle",
        "default": "hide",
        "description": "Accepts `hide` or `unhide`. `unhide` reverses the affects of `hide`.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include hide-visually;\n\n  &:active,\n  &:focus {\n    @include hide-visually(\"unhide\");\n  }\n}\n\n// CSS Output\n.element {\n  border: 0;\n  clip: rect(1px, 1px, 1px, 1px);\n  clip-path: inset(100%);\n  height: 1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n.hide-visually:active,\n.hide-visually:focus {\n  clip: auto;\n  clip-path: none;\n  height: auto;\n  overflow: visible;\n  position: static;\n  width: auto;\n}"
      }
    ],
    "since": [
      {
        "version": "5.0.0"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "throw": [
      "`#{$toggle}` is not a valid value for the `$toggle` argument in "
    ],
    "file": {
      "path": "bourbon/library/_hide-visually.scss",
      "name": "_hide-visually.scss"
    }
  },
  {
    "description": "Provides a concise, one-line method for setting `margin` on specific edges\nof a box. Use a `null` value to “skip” edges of the box with standard\nCSS shorthand.\n\n",
    "commentRange": {
      "start": 3,
      "end": 33
    },
    "context": {
      "type": "mixin",
      "name": "margin",
      "code": "\n  @include _directional-property(margin, null, $values);\n",
      "line": {
        "start": 35,
        "end": 37
      }
    },
    "parameter": [
      {
        "type": "list",
        "name": "values",
        "description": "List of margin values; accepts CSS shorthand.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include margin(null auto);\n}\n\n// CSS Output\n.element {\n  margin-left: auto;\n  margin-right: auto;\n}"
      },
      {
        "type": "scss",
        "code": ".element {\n  @include margin(10px 3em 20vh null);\n}\n\n// CSS Output\n.element {\n  margin-bottom: 20vh;\n  margin-right: 3em;\n  margin-top: 10px;\n}"
      }
    ],
    "require": [
      {
        "type": "mixin",
        "name": "_directional-property",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_margin.scss",
      "name": "_margin.scss"
    }
  },
  {
    "description": "Increments up or down a defined scale and returns an adjusted value. This\nhelps establish consistent measurements and spacial relationships throughout\nyour project. We provide a list of commonly used scales as\n[pre-defined variables][scales].\n\n[scales]: https://github.com/thoughtbot/bourbon/blob/master/core/bourbon/helpers/_scales.scss\n\n",
    "commentRange": {
      "start": 3,
      "end": 68
    },
    "context": {
      "type": "function",
      "name": "modular-scale",
      "code": "\n  $v1: nth($value, 1);\n  $v2: nth($value, length($value));\n  $value: $v1;\n\n  // scale $v2 to just above $v1\n  @while $v2 > $v1 {\n    $v2: ($v2 / $ratio); // will be off-by-1\n  }\n  @while $v2 < $v1 {\n    $v2: ($v2 * $ratio); // will fix off-by-1\n  }\n\n  // check AFTER scaling $v2 to prevent double-counting corner-case\n  $double-stranded: $v2 > $v1;\n\n  @if $increment > 0 {\n    @for $i from 1 through $increment {\n      @if $double-stranded and ($v1 * $ratio) > $v2 {\n        $value: $v2;\n        $v2: ($v2 * $ratio);\n      } @else {\n        $v1: ($v1 * $ratio);\n        $value: $v1;\n      }\n    }\n  }\n\n  @if $increment < 0 {\n    // adjust $v2 to just below $v1\n    @if $double-stranded {\n      $v2: ($v2 / $ratio);\n    }\n\n    @for $i from $increment through -1 {\n      @if $double-stranded and ($v1 / $ratio) < $v2 {\n        $value: $v2;\n        $v2: ($v2 / $ratio);\n      } @else {\n        $v1: ($v1 / $ratio);\n        $value: $v1;\n      }\n    }\n  }\n\n  @return $value;\n",
      "line": {
        "start": 70,
        "end": 120
      }
    },
    "parameter": [
      {
        "type": "number (unitless)",
        "name": "increment",
        "description": "How many steps to increment up or down the scale.\n"
      },
      {
        "type": "number (with unit) | list",
        "name": "value",
        "default": "1em",
        "description": "The base value the scale starts at. Can also be set globally using the\n  `modular-scale-base` key in the Bourbon settings.\n"
      },
      {
        "type": "number (unitless)",
        "name": "ratio",
        "default": "1.25",
        "description": "The ratio the scale is built on. Can also be set globally using the\n  `modular-scale-ratio` key in the Bourbon settings.\n"
      }
    ],
    "return": {
      "type": "number (with unit)"
    },
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  font-size: modular-scale(2);\n}\n\n// CSS Output\n.element {\n  font-size: 1.5625em;\n}"
      },
      {
        "type": "scss",
        "code": ".element {\n  margin-right: modular-scale(3, 2em);\n}\n\n// CSS Output\n.element {\n  margin-right: 3.90625em;\n}"
      },
      {
        "type": "scss",
        "code": ".element {\n  font-size: modular-scale(3, 1em 1.6em, $major-seventh);\n}\n\n// CSS Output\n.element {\n  font-size: 3em;\n}"
      },
      {
        "type": "scss",
        "code": "// Globally change the base ratio\n$bourbon: (\n  \"modular-scale-ratio\": 1.2,\n);\n\n.element {\n  font-size: modular-scale(3);\n}\n\n// CSS Output\n.element {\n  font-size: 1.728em;\n}"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "_fetch-bourbon-setting",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_modular-scale.scss",
      "name": "_modular-scale.scss"
    }
  },
  {
    "description": "Outputs the `overflow-wrap` property and its legacy name `word-wrap` to\nsupport browsers that do not yet use `overflow-wrap`.\n\n",
    "commentRange": {
      "start": 3,
      "end": 19
    },
    "context": {
      "type": "mixin",
      "name": "overflow-wrap",
      "code": "\n  word-wrap: $wrap;\n  // stylelint-disable-next-line order/properties-alphabetical-order\n  overflow-wrap: $wrap;\n",
      "line": {
        "start": 21,
        "end": 25
      }
    },
    "parameter": [
      {
        "type": "string",
        "name": "wrap",
        "default": "break-word",
        "description": "Accepted CSS values are `normal`, `break-word`, `inherit`, `initial`,\n  or `unset`.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".wrapper {\n  @include overflow-wrap;\n}\n\n// CSS Output\n.wrapper {\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "bourbon/library/_overflow-wrap.scss",
      "name": "_overflow-wrap.scss"
    }
  },
  {
    "description": "Provides a concise method for targeting `padding` on specific sides of a\nbox. Use a `null` value to “skip” a side.\n\n",
    "commentRange": {
      "start": 3,
      "end": 32
    },
    "context": {
      "type": "mixin",
      "name": "padding",
      "code": "\n  @include _directional-property(padding, null, $values);\n",
      "line": {
        "start": 34,
        "end": 36
      }
    },
    "parameter": [
      {
        "type": "list",
        "name": "values",
        "description": "List of padding values; accepts CSS shorthand.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element-one {\n  @include padding(null 1rem);\n}\n\n// CSS Output\n.element-one {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}"
      },
      {
        "type": "scss",
        "code": ".element-two {\n  @include padding(10vh null 10px 5%);\n}\n\n// CSS Output\n.element-two {\n  padding-bottom: 10px;\n  padding-left: 5%;\n  padding-top: 10vh;\n}"
      }
    ],
    "require": [
      {
        "type": "mixin",
        "name": "_directional-property",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_padding.scss",
      "name": "_padding.scss"
    }
  },
  {
    "description": "Provides a concise, one-line method for setting an element’s positioning\nproperties: `position`, `top`, `right`, `bottom` and `left`. Use a `null`\nvalue to “skip” an edge of the box.\n\n",
    "commentRange": {
      "start": 3,
      "end": 41
    },
    "context": {
      "type": "mixin",
      "name": "position",
      "code": "\n  $box-edge-values: _unpack-shorthand($box-edge-values);\n  $offsets: (\n    \"top\": nth($box-edge-values, 1),\n    \"right\": nth($box-edge-values, 2),\n    \"bottom\": nth($box-edge-values, 3),\n    \"left\": nth($box-edge-values, 4),\n  );\n\n  position: $position;\n\n  @each $offset, $value in $offsets {\n    @if _is-length($value) {\n      #{$offset}: $value;\n    }\n  }\n",
      "line": {
        "start": 43,
        "end": 62
      }
    },
    "parameter": [
      {
        "type": "string",
        "name": "position",
        "description": "A CSS position value.\n"
      },
      {
        "type": "list",
        "name": "box-edge-values",
        "description": "List of lengths; accepts CSS shorthand.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include position(relative, 0 null null 10em);\n}\n\n// CSS Output\n.element {\n  left: 10em;\n  position: relative;\n  top: 0;\n}"
      },
      {
        "type": "scss",
        "code": ".element {\n  @include position(absolute, 0);\n}\n\n// CSS Output\n.element {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "_is-length",
        "external": false
      },
      {
        "type": "function",
        "name": "_unpack-shorthand",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_position.scss",
      "name": "_position.scss"
    }
  },
  {
    "description": "Generates vendor prefixes.\n\n",
    "commentRange": {
      "start": 3,
      "end": 26
    },
    "context": {
      "type": "mixin",
      "name": "prefixer",
      "code": "\n  @each $prefix in $prefixes {\n    #{\"-\" + $prefix + \"-\" + $property}: $value;\n  }\n  #{$property}: $value;\n",
      "line": {
        "start": 28,
        "end": 37
      }
    },
    "parameter": [
      {
        "type": "string",
        "name": "property",
        "description": "Property to prefix.\n"
      },
      {
        "type": "string",
        "name": "value",
        "description": "Value to use.\n"
      },
      {
        "type": "list",
        "name": "prefixes",
        "description": "Vendor prefixes to output.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include prefixer(appearance, none, (\"webkit\", \"moz\"));\n}\n\n// CSS Output\n.element {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n}"
      }
    ],
    "author": [
      "Hugo Giraudel"
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "bourbon/library/_prefixer.scss",
      "name": "_prefixer.scss"
    }
  },
  {
    "description": "Mixes a color with black.\n\n",
    "commentRange": {
      "start": 3,
      "end": 20
    },
    "context": {
      "type": "function",
      "name": "shade",
      "code": "\n  @if not _is-color($color) {\n    @error \"`#{$color}` is not a valid color for the `$color` argument in \" +\n      \"the `shade` mixin.\";\n  } @else {\n    @return mix(#000, $color, $percent);\n  }\n",
      "line": {
        "start": 22,
        "end": 32
      }
    },
    "parameter": [
      {
        "type": "color",
        "name": "color"
      },
      {
        "type": "number (percentage)",
        "name": "percent",
        "description": "The amount of black to be mixed in.\n"
      }
    ],
    "return": {
      "type": "color"
    },
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  background-color: shade(#ffbb52, 60%);\n}\n\n// CSS Output\n.element {\n  background-color: #664a20;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "function",
        "name": "_is-color"
      }
    ],
    "throw": [
      "`#{$color}` is not a valid color for the `$color` argument in "
    ],
    "file": {
      "path": "bourbon/library/_shade.scss",
      "name": "_shade.scss"
    }
  },
  {
    "description": "Sets the `width` and `height` of the element in one statement.\n\n",
    "commentRange": {
      "start": 3,
      "end": 31
    },
    "context": {
      "type": "mixin",
      "name": "size",
      "code": "\n  @if _is-size($height) {\n    height: $height;\n  } @else {\n    @error \"`#{$height}` is not a valid length for the `$height` argument \" +\n      \"in the `size` mixin.\";\n  }\n\n  @if _is-size($width) {\n    width: $width;\n  } @else {\n    @error \"`#{$width}` is not a valid length for the `$width` argument \" +\n      \"in the `size` mixin.\";\n  }\n",
      "line": {
        "start": 33,
        "end": 50
      }
    },
    "parameter": [
      {
        "type": "number (with unit) | string",
        "name": "width"
      },
      {
        "type": "number (with unit) | string",
        "name": "height",
        "default": "$width"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".first-element {\n  @include size(2em);\n}\n\n// CSS Output\n.first-element {\n  width: 2em;\n  height: 2em;\n}"
      },
      {
        "type": "scss",
        "code": ".second-element {\n  @include size(auto, 10em);\n}\n\n// CSS Output\n.second-element {\n  width: auto;\n  height: 10em;\n}"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "_is-size",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "throw": [
      "`#{$height}` is not a valid length for the `$height` argument ",
      "`#{$width}` is not a valid length for the `$width` argument "
    ],
    "file": {
      "path": "bourbon/library/_size.scss",
      "name": "_size.scss"
    }
  },
  {
    "description": "Strips the unit from a number.\n\n",
    "commentRange": {
      "start": 3,
      "end": 13
    },
    "context": {
      "type": "function",
      "name": "strip-unit",
      "code": "\n  @return ($value / ($value * 0 + 1));\n",
      "line": {
        "start": 15,
        "end": 17
      }
    },
    "parameter": [
      {
        "type": "number",
        "name": "value"
      }
    ],
    "return": {
      "type": "number (unitless)"
    },
    "example": [
      {
        "type": "scss",
        "code": "$dimension: strip-unit(10em);\n\n// Output\n$dimension: 10;"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "bourbon/library/_strip-unit.scss",
      "name": "_strip-unit.scss"
    }
  },
  {
    "description": "A list of all _text-based_ HTML inputs. Please note that you must\ninterpolate the variable (`#{}`) to use it as a selector.\n\n",
    "commentRange": {
      "start": 11,
      "end": 37
    },
    "context": {
      "type": "variable",
      "name": "all-text-inputs",
      "value": "_assign-inputs($_text-inputs-list)",
      "scope": "private",
      "line": {
        "start": 39,
        "end": 39
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "#{$all-text-inputs} {\n  border: 1px solid #ccc;\n}\n\n// CSS Output\n[type='color'],\n[type='date'],\n[type='datetime'],\n[type='datetime-local'],\n[type='email'],\n[type='month'],\n[type='number'],\n[type='password'],\n[type='search'],\n[type='tel'],\n[type='text'],\n[type='time'],\n[type='url'],\n[type='week'],\ninput:not([type]),\ntextarea {\n  border: 1px solid #ccc;\n}"
      }
    ],
    "type": "list",
    "require": [
      {
        "type": "function",
        "name": "_assign-inputs",
        "external": false
      },
      {
        "type": "variable",
        "name": "_text-inputs-list",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_text-inputs.scss",
      "name": "_text-inputs.scss"
    }
  },
  {
    "description": "A list of all _text-based_ HTML inputs with the `:active` pseudo-class\napplied. Please note that you must interpolate the variable (`#{}`) to use\nit as a selector.\n\n",
    "commentRange": {
      "start": 41,
      "end": 68
    },
    "context": {
      "type": "variable",
      "name": "all-text-inputs-active",
      "value": "_assign-inputs($_text-inputs-list, active)",
      "scope": "private",
      "line": {
        "start": 70,
        "end": 70
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "#{$all-text-inputs-active} {\n  border: 1px solid #aaa;\n}\n\n// CSS Output\n[type='color']:active,\n[type='date']:active,\n[type='datetime']:active,\n[type='datetime-local']:active,\n[type='email']:active,\n[type='month']:active,\n[type='number']:active,\n[type='password']:active,\n[type='search']:active,\n[type='tel']:active,\n[type='text']:active,\n[type='time']:active,\n[type='url']:active,\n[type='week']:active,\ninput:not([type]):active,\ntextarea:active {\n  border: 1px solid #aaa;\n}"
      }
    ],
    "type": "list",
    "require": [
      {
        "type": "function",
        "name": "_assign-inputs",
        "external": false
      },
      {
        "type": "variable",
        "name": "_text-inputs-list",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_text-inputs.scss",
      "name": "_text-inputs.scss"
    }
  },
  {
    "description": "A list of all _text-based_ HTML inputs with the `:focus` pseudo-class\napplied. Please note that you must interpolate the variable (`#{}`) to use\nit as a selector.\n\n",
    "commentRange": {
      "start": 72,
      "end": 99
    },
    "context": {
      "type": "variable",
      "name": "all-text-inputs-focus",
      "value": "_assign-inputs($_text-inputs-list, focus)",
      "scope": "private",
      "line": {
        "start": 101,
        "end": 101
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "#{$all-text-inputs-focus} {\n  border: 1px solid #1565c0;\n}\n\n// CSS Output\n[type='color']:focus,\n[type='date']:focus,\n[type='datetime']:focus,\n[type='datetime-local']:focus,\n[type='email']:focus,\n[type='month']:focus,\n[type='number']:focus,\n[type='password']:focus,\n[type='search']:focus,\n[type='tel']:focus,\n[type='text']:focus,\n[type='time']:focus,\n[type='url']:focus,\n[type='week']:focus,\ninput:not([type]):focus,\ntextarea:focus {\n  border: 1px solid #1565c0;\n}"
      }
    ],
    "type": "list",
    "require": [
      {
        "type": "function",
        "name": "_assign-inputs",
        "external": false
      },
      {
        "type": "variable",
        "name": "_text-inputs-list",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_text-inputs.scss",
      "name": "_text-inputs.scss"
    }
  },
  {
    "description": "A list of all _text-based_ HTML inputs with the `:hover` pseudo-class\napplied. Please note that you must interpolate the variable (`#{}`) to use\nit as a selector.\n\n",
    "commentRange": {
      "start": 103,
      "end": 130
    },
    "context": {
      "type": "variable",
      "name": "all-text-inputs-hover",
      "value": "_assign-inputs($_text-inputs-list, hover)",
      "scope": "private",
      "line": {
        "start": 132,
        "end": 132
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "#{$all-text-inputs-hover} {\n  border: 1px solid #aaa;\n}\n\n// CSS Output\n[type='color']:hover,\n[type='date']:hover,\n[type='datetime']:hover,\n[type='datetime-local']:hover,\n[type='email']:hover,\n[type='month']:hover,\n[type='number']:hover,\n[type='password']:hover,\n[type='search']:hover,\n[type='tel']:hover,\n[type='text']:hover,\n[type='time']:hover,\n[type='url']:hover,\n[type='week']:hover,\ninput:not([type]):hover,\ntextarea:hover {\n  border: 1px solid #aaa;\n}"
      }
    ],
    "type": "list",
    "require": [
      {
        "type": "function",
        "name": "_assign-inputs",
        "external": false
      },
      {
        "type": "variable",
        "name": "_text-inputs-list",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_text-inputs.scss",
      "name": "_text-inputs.scss"
    }
  },
  {
    "description": "A list of all _text-based_ HTML inputs with the `:invalid` pseudo-class\napplied. Please note that you must interpolate the variable (`#{}`) to use\nit as a selector.\n\n",
    "commentRange": {
      "start": 134,
      "end": 161
    },
    "context": {
      "type": "variable",
      "name": "all-text-inputs-invalid",
      "value": "_assign-inputs($_text-inputs-list, invalid)",
      "scope": "private",
      "line": {
        "start": 163,
        "end": 163
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "#{$all-text-inputs-invalid} {\n  border: 1px solid #00f;\n}\n\n// CSS Output\n[type='color']:invalid,\n[type='date']:invalid,\n[type='datetime']:invalid,\n[type='datetime-local']:invalid,\n[type='email']:invalid,\n[type='month']:invalid,\n[type='number']:invalid,\n[type='password']:invalid,\n[type='search']:invalid,\n[type='tel']:invalid,\n[type='text']:invalid,\n[type='time']:invalid,\n[type='url']:invalid,\n[type='week']:invalid,\ninput:not([type]):invalid,\ntextarea:invalid {\n  border: 1px solid #00f;\n}"
      }
    ],
    "type": "list",
    "require": [
      {
        "type": "function",
        "name": "_assign-inputs",
        "external": false
      },
      {
        "type": "variable",
        "name": "_text-inputs-list",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/library/_text-inputs.scss",
      "name": "_text-inputs.scss"
    }
  },
  {
    "description": "Mixes a color with white.\n\n",
    "commentRange": {
      "start": 3,
      "end": 20
    },
    "context": {
      "type": "function",
      "name": "tint",
      "code": "\n  @if not _is-color($color) {\n    @error \"`#{$color}` is not a valid color for the `$color` argument in \" +\n      \"the `tint` mixin.\";\n  } @else {\n    @return mix(#fff, $color, $percent);\n  }\n",
      "line": {
        "start": 22,
        "end": 32
      }
    },
    "parameter": [
      {
        "type": "color",
        "name": "color"
      },
      {
        "type": "number (percentage)",
        "name": "percent",
        "description": "The amount of white to be mixed in.\n"
      }
    ],
    "return": {
      "type": "color"
    },
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  background-color: tint(#6ecaa6, 40%);\n}\n\n// CSS Output\n.element {\n  background-color: #a8dfc9;\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "function",
        "name": "_is-color"
      }
    ],
    "throw": [
      "`#{$color}` is not a valid color for the `$color` argument in "
    ],
    "file": {
      "path": "bourbon/library/_tint.scss",
      "name": "_tint.scss"
    }
  },
  {
    "description": "Generates a triangle pointing in a specified direction.\n\n",
    "commentRange": {
      "start": 3,
      "end": 34
    },
    "context": {
      "type": "mixin",
      "name": "triangle",
      "code": "\n  @if not index(\n    \"up\" \"up-right\" \"right\" \"down-right\" \"down\" \"down-left\" \"left\" \"up-left\",\n    $direction\n  ) {\n    @error \"Direction must be `up`, `up-right`, `right`, `down-right`, \" +\n      \"`down`, `down-left`, `left` or `up-left`.\";\n  } @else if not _is-color($color) {\n    @error \"`#{$color}` is not a valid color for the `$color` argument in \" +\n      \"the `triangle` mixin.\";\n  } @else {\n    border-style: solid;\n    height: 0;\n    width: 0;\n\n    @if $direction == \"up\" {\n      border-color: transparent transparent $color;\n      border-width: 0 ($width / 2) $height;\n    } @else if $direction == \"up-right\" {\n      border-color: transparent $color transparent transparent;\n      border-width: 0 $width $width 0;\n    } @else if $direction == \"right\" {\n      border-color: transparent transparent transparent $color;\n      border-width: ($height / 2) 0 ($height / 2) $width;\n    } @else if $direction == \"down-right\" {\n      border-color: transparent transparent $color;\n      border-width: 0 0 $width $width;\n    } @else if $direction == \"down\" {\n      border-color: $color transparent transparent;\n      border-width: $height ($width / 2) 0;\n    } @else if $direction == \"down-left\" {\n      border-color: transparent transparent transparent $color;\n      border-width: $width 0 0 $width;\n    } @else if $direction == \"left\" {\n      border-color: transparent $color transparent transparent;\n      border-width: ($height / 2) $width ($height / 2) 0;\n    } @else if $direction == \"up-left\" {\n      border-color: $color transparent transparent;\n      border-width: $width $width 0 0;\n    }\n  }\n",
      "line": {
        "start": 36,
        "end": 82
      }
    },
    "parameter": [
      {
        "type": "string",
        "name": "direction",
        "description": "The direction the triangle should point. Accepts `up`, `up-right`,\n  `right`, `down-right`, `down`, `down-left`, `left` or `up-left`.\n"
      },
      {
        "type": "number (with unit)",
        "name": "width",
        "description": "Width of the triangle.\n"
      },
      {
        "type": "number (with unit)",
        "name": "height",
        "description": "Height of the triangle.\n"
      },
      {
        "type": "color",
        "name": "color",
        "description": "Color of the triangle.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  &::before {\n    @include triangle(\"up\", 2rem, 1rem, #b25c9c);\n    content: \"\";\n  }\n}\n\n// CSS Output\n.element::before {\n  border-style: solid;\n  height: 0;\n  width: 0;\n  border-color: transparent transparent #b25c9c;\n  border-width: 0 1rem 1rem;\n  content: \"\";\n}"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "function",
        "name": "_is-color"
      }
    ],
    "throw": [
      "Direction must be `up`, `up-right`, `right`, `down-right`, ",
      "`#{$color}` is not a valid color for the `$color` argument in "
    ],
    "file": {
      "path": "bourbon/library/_triangle.scss",
      "name": "_triangle.scss"
    }
  },
  {
    "description": "Generates vendor prefixes for values.\n\n",
    "commentRange": {
      "start": 3,
      "end": 26
    },
    "context": {
      "type": "mixin",
      "name": "value-prefixer",
      "code": "\n  @each $prefix in $prefixes {\n    #{$property}: #{\"-\" + $prefix + \"-\" + $value};\n  }\n  #{$property}: $value;\n",
      "line": {
        "start": 28,
        "end": 37
      }
    },
    "parameter": [
      {
        "type": "string",
        "name": "property",
        "description": "Property to use.\n"
      },
      {
        "type": "string",
        "name": "value",
        "description": "Value to prefix.\n"
      },
      {
        "type": "list",
        "name": "prefixes",
        "description": "Vendor prefixes to output.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include value-prefixer(cursor, grab, (\"webkit\", \"moz\"));\n}\n\n// CSS Output\n.element {\n  cursor: -webkit-grab;\n  cursor: -moz-grab;\n  cursor: grab;\n}"
      }
    ],
    "author": [
      "Matthew Tobiasz"
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "bourbon/library/_value-prefixer.scss",
      "name": "_value-prefixer.scss"
    }
  },
  {
    "description": "Default global Bourbon settings. Values in this map are overwritten by any\nvalues set in the `$bourbon` map.\n\n",
    "commentRange": {
      "start": 3,
      "end": 28
    },
    "context": {
      "type": "variable",
      "name": "_bourbon-defaults",
      "value": "(\n  \"contrast-switch-dark-color\": #000,\n  \"contrast-switch-light-color\": #fff,\n  \"global-font-file-formats\": (\"woff2\", \"woff\"),\n  \"modular-scale-base\": 1em,\n  \"modular-scale-ratio\": $major-third,\n  \"rails-asset-pipeline\": false,\n)",
      "scope": "private",
      "line": {
        "start": 30,
        "end": 37
      }
    },
    "type": "map",
    "property": [
      {
        "type": "color",
        "name": "contrast-switch-dark-color",
        "default": "#000",
        "description": "Global dark color for the `contrast-switch` function."
      },
      {
        "type": "color",
        "name": "contrast-switch-light-color",
        "default": "#fff",
        "description": "Global light color for the `contrast-switch` function."
      },
      {
        "type": "list",
        "name": "global-font-file-formats",
        "default": "(\"woff2\", \"woff\")",
        "description": "Global font file formats for the `font-face` mixin."
      },
      {
        "type": "number (with unit)",
        "name": "modular-scale-base",
        "default": "1em",
        "description": "Global base value for the `modular-scale` function."
      },
      {
        "type": "number (unitless)",
        "name": "modular-scale-ratio",
        "default": "$major-third (1.25)",
        "description": "Global base ratio for the `modular-scale` function."
      },
      {
        "type": "boolean",
        "name": "rails-asset-pipeline",
        "default": "false",
        "description": "Set this to `true` when using the Rails Asset Pipeline and Bourbon will\n  write asset paths using\n  [sass-rails’ asset helpers](https://github.com/rails/sass-rails#asset-helpers)."
      }
    ],
    "access": "private",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/settings/_settings.scss",
      "name": "_settings.scss"
    },
    "usedBy": [
      {
        "description": "Return a Bourbon setting.\n\n",
        "context": {
          "type": "function",
          "name": "_fetch-bourbon-setting",
          "code": "\n  @return map-get(map-merge($_bourbon-defaults, $bourbon), $setting);\n",
          "line": {
            "start": 14,
            "end": 16
          }
        }
      }
    ]
  },
  {
    "description": "Global Bourbon settings.\n\n",
    "commentRange": {
      "start": 39,
      "end": 73
    },
    "context": {
      "type": "variable",
      "name": "Settings",
      "value": "()",
      "scope": "default",
      "line": {
        "start": 75,
        "end": 75
      }
    },
    "type": "map",
    "property": [
      {
        "type": "color",
        "name": "contrast-switch-dark-color",
        "default": "#000",
        "description": "Global dark color for the `contrast-switch` function."
      },
      {
        "type": "color",
        "name": "contrast-switch-light-color",
        "default": "#fff",
        "description": "Global light color for the `contrast-switch` function."
      },
      {
        "type": "list",
        "name": "global-font-file-formats",
        "default": "(\"woff2\", \"woff\")",
        "description": "Global font file formats for the `font-face` mixin."
      },
      {
        "type": "number (with unit)",
        "name": "modular-scale-base",
        "default": "1em",
        "description": "Global base value for the `modular-scale` function."
      },
      {
        "type": "number (unitless)",
        "name": "modular-scale-ratio",
        "default": "$major-third (1.25)",
        "description": "Global base ratio for the `modular-scale` function."
      },
      {
        "type": "boolean",
        "name": "rails-asset-pipeline",
        "default": "false",
        "description": "Set this to `true` when using the Rails Asset Pipeline and Bourbon will\n  write asset paths using\n  [sass-rails’ asset helpers](https://github.com/rails/sass-rails#asset-helpers)."
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "$bourbon: (\n  \"contrast-switch-dark-color\": #000,\n  \"contrast-switch-light-color\": #fff,\n  \"global-font-file-formats\": (\"woff2\", \"woff\"),\n  \"modular-scale-base\": 1em,\n  \"modular-scale-ratio\": $major-third,\n  \"rails-asset-pipeline\": false,\n);"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/settings/_settings.scss",
      "name": "_settings.scss"
    }
  },
  {
    "description": "Append pseudo-classes to a selector(s).\n\n",
    "commentRange": {
      "start": 3,
      "end": 13
    },
    "context": {
      "type": "function",
      "name": "_assign-inputs",
      "code": "\n  $list: ();\n\n  @each $input in $inputs {\n    $input: unquote($input);\n    $input: if($pseudo, $input + \":\" + $pseudo, $input);\n    $list: append($list, $input, comma);\n  }\n\n  @return $list;\n",
      "line": {
        "start": 15,
        "end": 28
      }
    },
    "parameter": [
      {
        "type": "list | string",
        "name": "inputs",
        "description": "A selector, or list of selectors, to apply the pseudo-class to.\n"
      },
      {
        "type": "pseudo-class",
        "name": "pseudo",
        "default": "null",
        "description": "The pseudo-class to be appended.\n"
      }
    ],
    "return": {
      "type": "list"
    },
    "access": "private",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "bourbon/utilities/_assign-inputs.scss",
      "name": "_assign-inputs.scss"
    },
    "usedBy": [
      {
        "description": "A list of all HTML button elements. Please note that you must interpolate\nthe variable (`#{}`) to use it as a selector.\n\n",
        "context": {
          "type": "variable",
          "name": "all-buttons",
          "value": "_assign-inputs($_buttons-list)",
          "scope": "private",
          "line": {
            "start": 27,
            "end": 27
          }
        }
      },
      {
        "description": "A list of all HTML button elements with the `:active` pseudo-class applied.\nPlease note that you must interpolate the variable (`#{}`) to use it as a\nselector.\n\n",
        "context": {
          "type": "variable",
          "name": "all-buttons-active",
          "value": "_assign-inputs($_buttons-list, active)",
          "scope": "private",
          "line": {
            "start": 46,
            "end": 46
          }
        }
      },
      {
        "description": "A list of all HTML button elements with the `:focus` pseudo-class applied.\nPlease note that you must interpolate the variable (`#{}`) to use it as a\nselector.\n\n",
        "context": {
          "type": "variable",
          "name": "all-buttons-focus",
          "value": "_assign-inputs($_buttons-list, focus)",
          "scope": "private",
          "line": {
            "start": 65,
            "end": 65
          }
        }
      },
      {
        "description": "A list of all HTML button elements with the `:hover` pseudo-class applied.\nPlease note that you must interpolate the variable (`#{}`) to use it as a\nselector.\n\n",
        "context": {
          "type": "variable",
          "name": "all-buttons-hover",
          "value": "_assign-inputs($_buttons-list, hover)",
          "scope": "private",
          "line": {
            "start": 84,
            "end": 84
          }
        }
      },
      {
        "description": "A list of all _text-based_ HTML inputs. Please note that you must\ninterpolate the variable (`#{}`) to use it as a selector.\n\n",
        "context": {
          "type": "variable",
          "name": "all-text-inputs",
          "value": "_assign-inputs($_text-inputs-list)",
          "scope": "private",
          "line": {
            "start": 39,
            "end": 39
          }
        }
      },
      {
        "description": "A list of all _text-based_ HTML inputs with the `:active` pseudo-class\napplied. Please note that you must interpolate the variable (`#{}`) to use\nit as a selector.\n\n",
        "context": {
          "type": "variable",
          "name": "all-text-inputs-active",
          "value": "_assign-inputs($_text-inputs-list, active)",
          "scope": "private",
          "line": {
            "start": 70,
            "end": 70
          }
        }
      },
      {
        "description": "A list of all _text-based_ HTML inputs with the `:focus` pseudo-class\napplied. Please note that you must interpolate the variable (`#{}`) to use\nit as a selector.\n\n",
        "context": {
          "type": "variable",
          "name": "all-text-inputs-focus",
          "value": "_assign-inputs($_text-inputs-list, focus)",
          "scope": "private",
          "line": {
            "start": 101,
            "end": 101
          }
        }
      },
      {
        "description": "A list of all _text-based_ HTML inputs with the `:hover` pseudo-class\napplied. Please note that you must interpolate the variable (`#{}`) to use\nit as a selector.\n\n",
        "context": {
          "type": "variable",
          "name": "all-text-inputs-hover",
          "value": "_assign-inputs($_text-inputs-list, hover)",
          "scope": "private",
          "line": {
            "start": 132,
            "end": 132
          }
        }
      },
      {
        "description": "A list of all _text-based_ HTML inputs with the `:invalid` pseudo-class\napplied. Please note that you must interpolate the variable (`#{}`) to use\nit as a selector.\n\n",
        "context": {
          "type": "variable",
          "name": "all-text-inputs-invalid",
          "value": "_assign-inputs($_text-inputs-list, invalid)",
          "scope": "private",
          "line": {
            "start": 163,
            "end": 163
          }
        }
      }
    ]
  },
  {
    "description": "Transforms shorthand to its shortest possible form.\n\n",
    "commentRange": {
      "start": 3,
      "end": 16
    },
    "context": {
      "type": "function",
      "name": "_compact-shorthand",
      "code": "\n  $output: null;\n\n  $a: nth($values, 1);\n  $b: if(length($values) < 2, $a, nth($values, 2));\n  $c: if(length($values) < 3, $a, nth($values, 3));\n  $d: if(length($values) < 2, $a, nth($values, if(length($values) < 4, 2, 4)));\n\n  @if $a == 0 { $a: 0; }\n  @if $b == 0 { $b: 0; }\n  @if $c == 0 { $c: 0; }\n  @if $d == 0 { $d: 0; }\n\n  @if $a == $b and $a == $c and $a == $d {\n    $output: $a;\n  } @else if $a == $c and $b == $d {\n    $output: $a $b;\n  } @else if $b == $d {\n    $output: $a $b $c;\n  } @else {\n    $output: $a $b $c $d;\n  }\n\n  @return $output;\n",
      "line": {
        "start": 18,
        "end": 42
      }
    },
    "parameter": [
      {
        "type": "list",
        "name": "values",
        "description": "List of directional values.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "$values: _compact-shorthand(10px 20px 10px 20px);\n\n// Output\n$values: 10px 20px;"
      }
    ],
    "return": {
      "type": "list"
    },
    "access": "private",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "bourbon/utilities/_compact-shorthand.scss",
      "name": "_compact-shorthand.scss"
    },
    "usedBy": [
      {
        "description": "Builds directional properties by parsing CSS shorthand values. For example,\na value of `10px null` will output top and bottom directional properties,\nbut the `null` skips left and right from being output.\n\n",
        "context": {
          "type": "mixin",
          "name": "_directional-property",
          "code": "\n  $top: $property + \"-top\" + if($suffix, \"-#{$suffix}\", \"\");\n  $bottom: $property + \"-bottom\" + if($suffix, \"-#{$suffix}\", \"\");\n  $left: $property + \"-left\" + if($suffix, \"-#{$suffix}\", \"\");\n  $right: $property + \"-right\" + if($suffix, \"-#{$suffix}\", \"\");\n  $all: $property + if($suffix, \"-#{$suffix}\", \"\");\n\n  $values: _compact-shorthand($values);\n\n  @if _contains-falsy($values) {\n    @if nth($values, 1) { #{$top}: nth($values, 1); }\n\n    @if length($values) == 1 {\n      @if nth($values, 1) { #{$right}: nth($values, 1); }\n    } @else {\n      @if nth($values, 2) { #{$right}: nth($values, 2); }\n    }\n\n    @if length($values) == 2 {\n      @if nth($values, 1) { #{$bottom}: nth($values, 1); }\n      @if nth($values, 2) { #{$left}: nth($values, 2); }\n    } @else if length($values) == 3 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3); }\n      @if nth($values, 2) { #{$left}: nth($values, 2); }\n    } @else if length($values) == 4 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3); }\n      @if nth($values, 4) { #{$left}: nth($values, 4); }\n    }\n  } @else {\n    #{$all}: $values;\n  }\n",
          "line": {
            "start": 33,
            "end": 68
          }
        }
      }
    ]
  },
  {
    "description": "Programatically determines the contrast ratio between two colors.\n\nNote that the alpha channel is ignored.\n\n",
    "commentRange": {
      "start": 3,
      "end": 20
    },
    "context": {
      "type": "function",
      "name": "_contrast-ratio",
      "code": "\n  $-local-lightness-1: _lightness($color-1) + 0.05;\n  $-local-lightness-2: _lightness($color-2) + 0.05;\n\n  @if $-local-lightness-1 > $-local-lightness-2 {\n    @return $-local-lightness-1 / $-local-lightness-2;\n  } @else {\n    @return $-local-lightness-2 / $-local-lightness-1;\n  }\n",
      "line": {
        "start": 22,
        "end": 31
      }
    },
    "link": [
      {
        "url": "https://goo.gl/54htLV",
        "caption": ""
      }
    ],
    "parameter": [
      {
        "type": "color (hex)",
        "name": "color-1"
      },
      {
        "type": "color (hex)",
        "name": "color-2"
      }
    ],
    "return": {
      "type": "number (1-21)"
    },
    "example": [
      {
        "type": "scss",
        "code": "_contrast-ratio(black, white)"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "_lightness",
        "external": false
      }
    ],
    "access": "private",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/utilities/_contrast-ratio.scss",
      "name": "_contrast-ratio.scss"
    },
    "usedBy": [
      {
        "description": "Switches between two colors based on the contrast to another color. It’s\nlike a [ternary operator] for color contrast and can be useful for building\na button system.\n\nThe calculation of the contrast ratio is based on the [WCAG 2.0\nspecification]. However, we cannot guarantee full compliance, though all of\nour manual testing passed.\n\n  [ternary operator]: https://goo.gl/ccfLqi\n  [WCAG 2.0 specification]: https://goo.gl/zhQuYA\n\n",
        "context": {
          "type": "function",
          "name": "contrast-switch",
          "code": "\n  @if not _is-color($base-color) {\n    @error \"`#{$base-color}` is not a valid color for the `$base-color` \" +\n      \"argument in the `contrast-switch` function.\";\n  } @else if not _is-color($dark-color) {\n    @error \"`#{$dark-color}` is not a valid color for the `$dark-color` \" +\n      \"argument in the `contrast-switch` function.\";\n  } @else if not _is-color($light-color) {\n    @error \"`#{$light-color}` is not a valid color for the `$light-color` \" +\n      \"argument in the `contrast-switch` function.\";\n  } @else {\n    $-contrast-to-dark: _contrast-ratio($base-color, $dark-color);\n    $-contrast-to-light: _contrast-ratio($base-color, $light-color);\n    $-prefer-dark: $-contrast-to-dark >= $-contrast-to-light;\n\n    @return if($-prefer-dark, $dark-color, $light-color);\n  }\n",
          "line": {
            "start": 60,
            "end": 81
          }
        }
      }
    ]
  },
  {
    "description": "Builds directional properties by parsing CSS shorthand values. For example,\na value of `10px null` will output top and bottom directional properties,\nbut the `null` skips left and right from being output.\n\n",
    "commentRange": {
      "start": 3,
      "end": 31
    },
    "context": {
      "type": "mixin",
      "name": "_directional-property",
      "code": "\n  $top: $property + \"-top\" + if($suffix, \"-#{$suffix}\", \"\");\n  $bottom: $property + \"-bottom\" + if($suffix, \"-#{$suffix}\", \"\");\n  $left: $property + \"-left\" + if($suffix, \"-#{$suffix}\", \"\");\n  $right: $property + \"-right\" + if($suffix, \"-#{$suffix}\", \"\");\n  $all: $property + if($suffix, \"-#{$suffix}\", \"\");\n\n  $values: _compact-shorthand($values);\n\n  @if _contains-falsy($values) {\n    @if nth($values, 1) { #{$top}: nth($values, 1); }\n\n    @if length($values) == 1 {\n      @if nth($values, 1) { #{$right}: nth($values, 1); }\n    } @else {\n      @if nth($values, 2) { #{$right}: nth($values, 2); }\n    }\n\n    @if length($values) == 2 {\n      @if nth($values, 1) { #{$bottom}: nth($values, 1); }\n      @if nth($values, 2) { #{$left}: nth($values, 2); }\n    } @else if length($values) == 3 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3); }\n      @if nth($values, 2) { #{$left}: nth($values, 2); }\n    } @else if length($values) == 4 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3); }\n      @if nth($values, 4) { #{$left}: nth($values, 4); }\n    }\n  } @else {\n    #{$all}: $values;\n  }\n",
      "line": {
        "start": 33,
        "end": 68
      }
    },
    "parameter": [
      {
        "type": "string",
        "name": "property",
        "description": "Base property.\n"
      },
      {
        "type": "string",
        "name": "suffix",
        "description": "Suffix to append. Use `null` to omit.\n"
      },
      {
        "type": "list",
        "name": "values",
        "description": "List of values to set for the property.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  @include _directional-property(border, width, null 5px);\n}\n\n// CSS Output\n.element {\n  border-right-width: 5px;\n  border-left-width: 5px;\n}"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "_compact-shorthand",
        "external": false
      },
      {
        "type": "function",
        "name": "_contains-falsy",
        "external": false
      }
    ],
    "access": "private",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/utilities/_directional-property.scss",
      "name": "_directional-property.scss"
    },
    "usedBy": [
      {
        "description": "Provides a concise, one-line method for setting `border-color` on specific\nedges of a box. Use a `null` value to “skip” edges of the box with standard\nCSS shorthand.\n\n",
        "context": {
          "type": "mixin",
          "name": "border-color",
          "code": "\n  @include _directional-property(border, color, $values);\n",
          "line": {
            "start": 24,
            "end": 26
          }
        }
      },
      {
        "description": "Provides a concise, one-line method for setting `border-style` on specific\nedges of a box. Use a `null` value to “skip” edges of the box with standard\nCSS shorthand.\n\n",
        "context": {
          "type": "mixin",
          "name": "border-style",
          "code": "\n  @include _directional-property(border, style, $values);\n",
          "line": {
            "start": 23,
            "end": 25
          }
        }
      },
      {
        "description": "Provides a concise, one-line method for setting `border-width` on specific\nedges of a box. Use a `null` value to “skip” edges of the box with standard\nCSS shorthand.\n\n",
        "context": {
          "type": "mixin",
          "name": "border-width",
          "code": "\n  @include _directional-property(border, width, $values);\n",
          "line": {
            "start": 23,
            "end": 25
          }
        }
      },
      {
        "description": "Provides a concise, one-line method for setting `margin` on specific edges\nof a box. Use a `null` value to “skip” edges of the box with standard\nCSS shorthand.\n\n",
        "context": {
          "type": "mixin",
          "name": "margin",
          "code": "\n  @include _directional-property(margin, null, $values);\n",
          "line": {
            "start": 35,
            "end": 37
          }
        }
      },
      {
        "description": "Provides a concise method for targeting `padding` on specific sides of a\nbox. Use a `null` value to “skip” a side.\n\n",
        "context": {
          "type": "mixin",
          "name": "padding",
          "code": "\n  @include _directional-property(padding, null, $values);\n",
          "line": {
            "start": 34,
            "end": 36
          }
        }
      }
    ]
  },
  {
    "description": "Return a Bourbon setting.\n\n",
    "commentRange": {
      "start": 3,
      "end": 12
    },
    "context": {
      "type": "function",
      "name": "_fetch-bourbon-setting",
      "code": "\n  @return map-get(map-merge($_bourbon-defaults, $bourbon), $setting);\n",
      "line": {
        "start": 14,
        "end": 16
      }
    },
    "parameter": [
      {
        "type": "string",
        "name": "setting"
      }
    ],
    "return": {
      "type": "boolean | color | list | number | string"
    },
    "example": [
      {
        "type": "scss",
        "code": "_fetch-bourbon-setting(rails-asset-pipeline)"
      }
    ],
    "access": "private",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "variable",
        "name": "_bourbon-defaults"
      }
    ],
    "file": {
      "path": "bourbon/utilities/_fetch-bourbon-setting.scss",
      "name": "_fetch-bourbon-setting.scss"
    },
    "usedBy": [
      {
        "description": "Switches between two colors based on the contrast to another color. It’s\nlike a [ternary operator] for color contrast and can be useful for building\na button system.\n\nThe calculation of the contrast ratio is based on the [WCAG 2.0\nspecification]. However, we cannot guarantee full compliance, though all of\nour manual testing passed.\n\n  [ternary operator]: https://goo.gl/ccfLqi\n  [WCAG 2.0 specification]: https://goo.gl/zhQuYA\n\n",
        "context": {
          "type": "function",
          "name": "contrast-switch",
          "code": "\n  @if not _is-color($base-color) {\n    @error \"`#{$base-color}` is not a valid color for the `$base-color` \" +\n      \"argument in the `contrast-switch` function.\";\n  } @else if not _is-color($dark-color) {\n    @error \"`#{$dark-color}` is not a valid color for the `$dark-color` \" +\n      \"argument in the `contrast-switch` function.\";\n  } @else if not _is-color($light-color) {\n    @error \"`#{$light-color}` is not a valid color for the `$light-color` \" +\n      \"argument in the `contrast-switch` function.\";\n  } @else {\n    $-contrast-to-dark: _contrast-ratio($base-color, $dark-color);\n    $-contrast-to-light: _contrast-ratio($base-color, $light-color);\n    $-prefer-dark: $-contrast-to-dark >= $-contrast-to-light;\n\n    @return if($-prefer-dark, $dark-color, $light-color);\n  }\n",
          "line": {
            "start": 60,
            "end": 81
          }
        }
      },
      {
        "description": "Generates an `@font-face` declaration. You can choose the specific file\nformats you need to output; the mixin supports `woff2`\nand `woff`. The mixin also supports usage with the Rails Asset Pipeline,\nwhich you can enable per use, or globally in the `$bourbon()` settings.\n\n",
        "context": {
          "type": "mixin",
          "name": "font-face",
          "code": "\n  @font-face {\n    font-family: $font-family;\n    src: _font-source-declaration(\n      $font-family,\n      $file-path,\n      $asset-pipeline,\n      $file-formats\n    );\n    @content;\n  }\n",
          "line": {
            "start": 49,
            "end": 65
          }
        }
      },
      {
        "description": "Increments up or down a defined scale and returns an adjusted value. This\nhelps establish consistent measurements and spacial relationships throughout\nyour project. We provide a list of commonly used scales as\n[pre-defined variables][scales].\n\n[scales]: https://github.com/thoughtbot/bourbon/blob/master/core/bourbon/helpers/_scales.scss\n\n",
        "context": {
          "type": "function",
          "name": "modular-scale",
          "code": "\n  $v1: nth($value, 1);\n  $v2: nth($value, length($value));\n  $value: $v1;\n\n  // scale $v2 to just above $v1\n  @while $v2 > $v1 {\n    $v2: ($v2 / $ratio); // will be off-by-1\n  }\n  @while $v2 < $v1 {\n    $v2: ($v2 * $ratio); // will fix off-by-1\n  }\n\n  // check AFTER scaling $v2 to prevent double-counting corner-case\n  $double-stranded: $v2 > $v1;\n\n  @if $increment > 0 {\n    @for $i from 1 through $increment {\n      @if $double-stranded and ($v1 * $ratio) > $v2 {\n        $value: $v2;\n        $v2: ($v2 * $ratio);\n      } @else {\n        $v1: ($v1 * $ratio);\n        $value: $v1;\n      }\n    }\n  }\n\n  @if $increment < 0 {\n    // adjust $v2 to just below $v1\n    @if $double-stranded {\n      $v2: ($v2 / $ratio);\n    }\n\n    @for $i from $increment through -1 {\n      @if $double-stranded and ($v1 / $ratio) < $v2 {\n        $value: $v2;\n        $v2: ($v2 / $ratio);\n      } @else {\n        $v1: ($v1 / $ratio);\n        $value: $v1;\n      }\n    }\n  }\n\n  @return $value;\n",
          "line": {
            "start": 70,
            "end": 120
          }
        }
      }
    ]
  },
  {
    "description": "Builds the `src` list for an `@font-face` declaration.\n\n",
    "commentRange": {
      "start": 3,
      "end": 19
    },
    "context": {
      "type": "function",
      "name": "_font-source-declaration",
      "code": "\n  $src: ();\n\n  $formats-map: (\n    \"woff2\": \"#{$file-path}.woff2\" format(\"woff2\"),\n    \"woff\": \"#{$file-path}.woff\" format(\"woff\"),\n  );\n\n  @each $format in $file-formats {\n    @if _contains(map-keys($formats-map), $format) {\n      $value: map-get($formats-map, $format);\n      $file-path: nth($value, 1);\n      $font-format: nth($value, 2);\n\n      @if $asset-pipeline == true {\n        $src: append($src, font-url($file-path) $font-format, comma);\n      } @else {\n        $src: append($src, url($file-path) $font-format, comma);\n      }\n    } @else {\n      @error \"`#{$file-formats}` contains an unsupported font file format. \" +\n        \"Must be `woff` and/or `woff2`.\";\n    }\n  }\n\n  @return $src;\n",
      "line": {
        "start": 21,
        "end": 52
      }
    },
    "link": [
      {
        "url": "https://goo.gl/Ru1bKP",
        "caption": ""
      }
    ],
    "parameter": [
      {
        "type": "string",
        "name": "font-family"
      },
      {
        "type": "string",
        "name": "file-path"
      },
      {
        "type": "boolean",
        "name": "asset-pipeline"
      },
      {
        "type": "list",
        "name": "file-formats"
      }
    ],
    "return": {
      "type": "list"
    },
    "require": [
      {
        "type": "function",
        "name": "_contains",
        "external": false
      }
    ],
    "access": "private",
    "group": [
      "undefined"
    ],
    "throw": [
      "`#{$file-formats}` contains an unsupported font file format. "
    ],
    "file": {
      "path": "bourbon/utilities/_font-source-declaration.scss",
      "name": "_font-source-declaration.scss"
    },
    "usedBy": [
      {
        "description": "Generates an `@font-face` declaration. You can choose the specific file\nformats you need to output; the mixin supports `woff2`\nand `woff`. The mixin also supports usage with the Rails Asset Pipeline,\nwhich you can enable per use, or globally in the `$bourbon()` settings.\n\n",
        "context": {
          "type": "mixin",
          "name": "font-face",
          "code": "\n  @font-face {\n    font-family: $font-family;\n    src: _font-source-declaration(\n      $font-family,\n      $file-path,\n      $asset-pipeline,\n      $file-formats\n    );\n    @content;\n  }\n",
          "line": {
            "start": 49,
            "end": 65
          }
        }
      }
    ]
  },
  {
    "description": "Performs gamma correction on a single color channel.\n\nNote that the calculation is approximate if a `pow()` is not available.\n\n",
    "commentRange": {
      "start": 3,
      "end": 11
    },
    "context": {
      "type": "function",
      "name": "_gamma",
      "code": "\n  @if $channel < 0.03928 {\n    @return $channel / 12.92;\n  } @else {\n    $c: ($channel + 0.055) / 1.055;\n    @if function-exists(\"pow\") {\n      @return pow($c, 2.4);\n    } @else {\n      @return 0.56 * $c * $c * $c + 0.44 * $c * $c;\n    }\n  }\n",
      "line": {
        "start": 13,
        "end": 24
      }
    },
    "parameter": [
      {
        "type": "number (0-1)",
        "name": "channel"
      }
    ],
    "return": {
      "type": "number (0-1)"
    },
    "access": "private",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "bourbon/utilities/_gamma.scss",
      "name": "_gamma.scss"
    },
    "usedBy": [
      {
        "description": "Programatically determines the lightness of a color.\n\n",
        "context": {
          "type": "function",
          "name": "_lightness",
          "code": "\n  $-local-red-raw: red(rgba($hex-color, 1));\n  $-local-green-raw: green(rgba($hex-color, 1));\n  $-local-blue-raw: blue(rgba($hex-color, 1));\n\n  $-local-red: _gamma($-local-red-raw / 255);\n  $-local-green: _gamma($-local-green-raw / 255);\n  $-local-blue: _gamma($-local-blue-raw / 255);\n\n  @return $-local-red * 0.2126 + $-local-green * 0.7152 + $-local-blue * 0.0722;\n",
          "line": {
            "start": 14,
            "end": 24
          }
        }
      },
      {
        "description": "Programatically determines the lightness of a color.\n\n",
        "context": {
          "type": "function",
          "name": "_lightness",
          "code": "\n  $-local-red-raw: red(rgba($hex-color, 1));\n  $-local-green-raw: green(rgba($hex-color, 1));\n  $-local-blue-raw: blue(rgba($hex-color, 1));\n\n  $-local-red: _gamma($-local-red-raw / 255);\n  $-local-green: _gamma($-local-green-raw / 255);\n  $-local-blue: _gamma($-local-blue-raw / 255);\n\n  @return $-local-red * 0.2126 + $-local-green * 0.7152 + $-local-blue * 0.0722;\n",
          "line": {
            "start": 14,
            "end": 24
          }
        }
      },
      {
        "description": "Programatically determines the lightness of a color.\n\n",
        "context": {
          "type": "function",
          "name": "_lightness",
          "code": "\n  $-local-red-raw: red(rgba($hex-color, 1));\n  $-local-green-raw: green(rgba($hex-color, 1));\n  $-local-blue-raw: blue(rgba($hex-color, 1));\n\n  $-local-red: _gamma($-local-red-raw / 255);\n  $-local-green: _gamma($-local-green-raw / 255);\n  $-local-blue: _gamma($-local-blue-raw / 255);\n\n  @return $-local-red * 0.2126 + $-local-green * 0.7152 + $-local-blue * 0.0722;\n",
          "line": {
            "start": 14,
            "end": 24
          }
        }
      }
    ]
  },
  {
    "description": "Programatically determines the lightness of a color.\n\n",
    "commentRange": {
      "start": 3,
      "end": 12
    },
    "context": {
      "type": "function",
      "name": "_lightness",
      "code": "\n  $-local-red-raw: red(rgba($hex-color, 1));\n  $-local-green-raw: green(rgba($hex-color, 1));\n  $-local-blue-raw: blue(rgba($hex-color, 1));\n\n  $-local-red: _gamma($-local-red-raw / 255);\n  $-local-green: _gamma($-local-green-raw / 255);\n  $-local-blue: _gamma($-local-blue-raw / 255);\n\n  @return $-local-red * 0.2126 + $-local-green * 0.7152 + $-local-blue * 0.0722;\n",
      "line": {
        "start": 14,
        "end": 24
      }
    },
    "parameter": [
      {
        "type": "color (hex)",
        "name": "hex-color"
      }
    ],
    "return": {
      "type": "number (0-1)"
    },
    "example": [
      {
        "type": "scss",
        "code": "_lightness($color)"
      }
    ],
    "access": "private",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "function",
        "name": "_gamma"
      },
      {
        "type": "function",
        "name": "_gamma"
      },
      {
        "type": "function",
        "name": "_gamma"
      }
    ],
    "file": {
      "path": "bourbon/utilities/_lightness.scss",
      "name": "_lightness.scss"
    },
    "usedBy": [
      {
        "description": "Programatically determines the contrast ratio between two colors.\n\nNote that the alpha channel is ignored.\n\n",
        "context": {
          "type": "function",
          "name": "_contrast-ratio",
          "code": "\n  $-local-lightness-1: _lightness($color-1) + 0.05;\n  $-local-lightness-2: _lightness($color-2) + 0.05;\n\n  @if $-local-lightness-1 > $-local-lightness-2 {\n    @return $-local-lightness-1 / $-local-lightness-2;\n  } @else {\n    @return $-local-lightness-2 / $-local-lightness-1;\n  }\n",
          "line": {
            "start": 22,
            "end": 31
          }
        }
      }
    ]
  },
  {
    "description": "Transforms shorthand that can range from 1-to-4 values to be 4 values.\n\n",
    "commentRange": {
      "start": 3,
      "end": 17
    },
    "context": {
      "type": "function",
      "name": "_unpack-shorthand",
      "code": "\n  @if length($shorthand) == 1 {\n    @return nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1);\n  } @else if length($shorthand) == 2 {\n    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 1) nth($shorthand, 2);\n  } @else if length($shorthand) == 3 {\n    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 3) nth($shorthand, 2);\n  } @else {\n    @return $shorthand;\n  }\n",
      "line": {
        "start": 19,
        "end": 29
      }
    },
    "parameter": [
      {
        "type": "list",
        "name": "shorthand"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".element {\n  margin: _unpack-shorthand(1em 2em);\n}\n\n// CSS Output\n.element {\n  margin: 1em 2em 1em 2em;\n}"
      }
    ],
    "access": "private",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "bourbon/utilities/_unpack-shorthand.scss",
      "name": "_unpack-shorthand.scss"
    },
    "usedBy": [
      {
        "description": "Provides a concise, one-line method for setting an element’s positioning\nproperties: `position`, `top`, `right`, `bottom` and `left`. Use a `null`\nvalue to “skip” an edge of the box.\n\n",
        "context": {
          "type": "mixin",
          "name": "position",
          "code": "\n  $box-edge-values: _unpack-shorthand($box-edge-values);\n  $offsets: (\n    \"top\": nth($box-edge-values, 1),\n    \"right\": nth($box-edge-values, 2),\n    \"bottom\": nth($box-edge-values, 3),\n    \"left\": nth($box-edge-values, 4),\n  );\n\n  position: $position;\n\n  @each $offset, $value in $offsets {\n    @if _is-length($value) {\n      #{$offset}: $value;\n    }\n  }\n",
          "line": {
            "start": 43,
            "end": 62
          }
        }
      }
    ]
  },
  {
    "description": "Checks if a list does not contain any values.\n\n",
    "commentRange": {
      "start": 3,
      "end": 10
    },
    "context": {
      "type": "function",
      "name": "_contains-falsy",
      "code": "\n  @each $item in $list {\n    @if not $item {\n      @return true;\n    }\n  }\n\n  @return false;\n",
      "line": {
        "start": 12,
        "end": 20
      }
    },
    "parameter": [
      {
        "type": "list",
        "name": "list",
        "description": "The list to check against.\n"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "access": "private",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "bourbon/validators/_contains-falsy.scss",
      "name": "_contains-falsy.scss"
    },
    "usedBy": [
      {
        "description": "Builds directional properties by parsing CSS shorthand values. For example,\na value of `10px null` will output top and bottom directional properties,\nbut the `null` skips left and right from being output.\n\n",
        "context": {
          "type": "mixin",
          "name": "_directional-property",
          "code": "\n  $top: $property + \"-top\" + if($suffix, \"-#{$suffix}\", \"\");\n  $bottom: $property + \"-bottom\" + if($suffix, \"-#{$suffix}\", \"\");\n  $left: $property + \"-left\" + if($suffix, \"-#{$suffix}\", \"\");\n  $right: $property + \"-right\" + if($suffix, \"-#{$suffix}\", \"\");\n  $all: $property + if($suffix, \"-#{$suffix}\", \"\");\n\n  $values: _compact-shorthand($values);\n\n  @if _contains-falsy($values) {\n    @if nth($values, 1) { #{$top}: nth($values, 1); }\n\n    @if length($values) == 1 {\n      @if nth($values, 1) { #{$right}: nth($values, 1); }\n    } @else {\n      @if nth($values, 2) { #{$right}: nth($values, 2); }\n    }\n\n    @if length($values) == 2 {\n      @if nth($values, 1) { #{$bottom}: nth($values, 1); }\n      @if nth($values, 2) { #{$left}: nth($values, 2); }\n    } @else if length($values) == 3 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3); }\n      @if nth($values, 2) { #{$left}: nth($values, 2); }\n    } @else if length($values) == 4 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3); }\n      @if nth($values, 4) { #{$left}: nth($values, 4); }\n    }\n  } @else {\n    #{$all}: $values;\n  }\n",
          "line": {
            "start": 33,
            "end": 68
          }
        }
      }
    ]
  },
  {
    "description": "Checks if a list contains a value(s).\n\n",
    "commentRange": {
      "start": 3,
      "end": 13
    },
    "context": {
      "type": "function",
      "name": "_contains",
      "code": "\n  @each $value in $values {\n    @if type-of(index($list, $value)) != \"number\" {\n      @return false;\n    }\n  }\n\n  @return true;\n",
      "line": {
        "start": 15,
        "end": 26
      }
    },
    "parameter": [
      {
        "type": "list",
        "name": "list",
        "description": "The list to check against.\n"
      },
      {
        "type": "list",
        "name": "values",
        "description": "A single value or list of values to check for.\n"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "access": "private",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "bourbon/validators/_contains.scss",
      "name": "_contains.scss"
    },
    "usedBy": [
      {
        "description": "Builds the `src` list for an `@font-face` declaration.\n\n",
        "context": {
          "type": "function",
          "name": "_font-source-declaration",
          "code": "\n  $src: ();\n\n  $formats-map: (\n    \"woff2\": \"#{$file-path}.woff2\" format(\"woff2\"),\n    \"woff\": \"#{$file-path}.woff\" format(\"woff\"),\n  );\n\n  @each $format in $file-formats {\n    @if _contains(map-keys($formats-map), $format) {\n      $value: map-get($formats-map, $format);\n      $file-path: nth($value, 1);\n      $font-format: nth($value, 2);\n\n      @if $asset-pipeline == true {\n        $src: append($src, font-url($file-path) $font-format, comma);\n      } @else {\n        $src: append($src, url($file-path) $font-format, comma);\n      }\n    } @else {\n      @error \"`#{$file-formats}` contains an unsupported font file format. \" +\n        \"Must be `woff` and/or `woff2`.\";\n    }\n  }\n\n  @return $src;\n",
          "line": {
            "start": 21,
            "end": 52
          }
        }
      },
      {
        "description": "Checks for a valid number.\n\n",
        "context": {
          "type": "function",
          "name": "_is-number",
          "code": "\n  @return _contains(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" 0 1 2 3 4 5 6 7 8 9, $value);\n",
          "line": {
            "start": 13,
            "end": 15
          }
        }
      },
      {
        "description": "Checks for a valid CSS size.\n\n",
        "context": {
          "type": "function",
          "name": "_is-size",
          "code": "\n  @return _is-length($value)\n    or _contains(\"fill\" \"fit-content\" \"min-content\" \"max-content\", $value);\n",
          "line": {
            "start": 15,
            "end": 18
          }
        }
      }
    ]
  },
  {
    "description": "Checks for a valid CSS color.\n\n",
    "commentRange": {
      "start": 3,
      "end": 9
    },
    "context": {
      "type": "function",
      "name": "_is-color",
      "code": "\n  @return (type-of($color) == color) or ($color == \"currentColor\");\n",
      "line": {
        "start": 11,
        "end": 13
      }
    },
    "parameter": [
      {
        "type": "string",
        "name": "color"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "access": "private",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "bourbon/validators/_is-color.scss",
      "name": "_is-color.scss"
    },
    "usedBy": [
      {
        "description": "Switches between two colors based on the contrast to another color. It’s\nlike a [ternary operator] for color contrast and can be useful for building\na button system.\n\nThe calculation of the contrast ratio is based on the [WCAG 2.0\nspecification]. However, we cannot guarantee full compliance, though all of\nour manual testing passed.\n\n  [ternary operator]: https://goo.gl/ccfLqi\n  [WCAG 2.0 specification]: https://goo.gl/zhQuYA\n\n",
        "context": {
          "type": "function",
          "name": "contrast-switch",
          "code": "\n  @if not _is-color($base-color) {\n    @error \"`#{$base-color}` is not a valid color for the `$base-color` \" +\n      \"argument in the `contrast-switch` function.\";\n  } @else if not _is-color($dark-color) {\n    @error \"`#{$dark-color}` is not a valid color for the `$dark-color` \" +\n      \"argument in the `contrast-switch` function.\";\n  } @else if not _is-color($light-color) {\n    @error \"`#{$light-color}` is not a valid color for the `$light-color` \" +\n      \"argument in the `contrast-switch` function.\";\n  } @else {\n    $-contrast-to-dark: _contrast-ratio($base-color, $dark-color);\n    $-contrast-to-light: _contrast-ratio($base-color, $light-color);\n    $-prefer-dark: $-contrast-to-dark >= $-contrast-to-light;\n\n    @return if($-prefer-dark, $dark-color, $light-color);\n  }\n",
          "line": {
            "start": 60,
            "end": 81
          }
        }
      },
      {
        "description": "Mixes a color with black.\n\n",
        "context": {
          "type": "function",
          "name": "shade",
          "code": "\n  @if not _is-color($color) {\n    @error \"`#{$color}` is not a valid color for the `$color` argument in \" +\n      \"the `shade` mixin.\";\n  } @else {\n    @return mix(#000, $color, $percent);\n  }\n",
          "line": {
            "start": 22,
            "end": 32
          }
        }
      },
      {
        "description": "Mixes a color with white.\n\n",
        "context": {
          "type": "function",
          "name": "tint",
          "code": "\n  @if not _is-color($color) {\n    @error \"`#{$color}` is not a valid color for the `$color` argument in \" +\n      \"the `tint` mixin.\";\n  } @else {\n    @return mix(#fff, $color, $percent);\n  }\n",
          "line": {
            "start": 22,
            "end": 32
          }
        }
      },
      {
        "description": "Generates a triangle pointing in a specified direction.\n\n",
        "context": {
          "type": "mixin",
          "name": "triangle",
          "code": "\n  @if not index(\n    \"up\" \"up-right\" \"right\" \"down-right\" \"down\" \"down-left\" \"left\" \"up-left\",\n    $direction\n  ) {\n    @error \"Direction must be `up`, `up-right`, `right`, `down-right`, \" +\n      \"`down`, `down-left`, `left` or `up-left`.\";\n  } @else if not _is-color($color) {\n    @error \"`#{$color}` is not a valid color for the `$color` argument in \" +\n      \"the `triangle` mixin.\";\n  } @else {\n    border-style: solid;\n    height: 0;\n    width: 0;\n\n    @if $direction == \"up\" {\n      border-color: transparent transparent $color;\n      border-width: 0 ($width / 2) $height;\n    } @else if $direction == \"up-right\" {\n      border-color: transparent $color transparent transparent;\n      border-width: 0 $width $width 0;\n    } @else if $direction == \"right\" {\n      border-color: transparent transparent transparent $color;\n      border-width: ($height / 2) 0 ($height / 2) $width;\n    } @else if $direction == \"down-right\" {\n      border-color: transparent transparent $color;\n      border-width: 0 0 $width $width;\n    } @else if $direction == \"down\" {\n      border-color: $color transparent transparent;\n      border-width: $height ($width / 2) 0;\n    } @else if $direction == \"down-left\" {\n      border-color: transparent transparent transparent $color;\n      border-width: $width 0 0 $width;\n    } @else if $direction == \"left\" {\n      border-color: transparent $color transparent transparent;\n      border-width: ($height / 2) $width ($height / 2) 0;\n    } @else if $direction == \"up-left\" {\n      border-color: $color transparent transparent;\n      border-width: $width $width 0 0;\n    }\n  }\n",
          "line": {
            "start": 36,
            "end": 82
          }
        }
      }
    ]
  },
  {
    "description": "Checks for a valid CSS length.\n\n",
    "commentRange": {
      "start": 3,
      "end": 9
    },
    "context": {
      "type": "function",
      "name": "_is-length",
      "code": "\n  @return type-of($value) != \"null\"\n    and (\n      str-slice($value + \"\", 1, 4) == \"calc\"\n      or str-slice($value + \"\", 1, 3) == \"var\"\n      or str-slice($value + \"\", 1, 3) == \"env\"\n      or index(auto inherit initial 0, $value)\n      or (type-of($value) == \"number\" and not(unitless($value)))\n    );\n",
      "line": {
        "start": 11,
        "end": 20
      }
    },
    "parameter": [
      {
        "type": "string",
        "name": "value"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "access": "private",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "bourbon/validators/_is-length.scss",
      "name": "_is-length.scss"
    },
    "usedBy": [
      {
        "description": "Provides a concise, one-line method for setting an element’s positioning\nproperties: `position`, `top`, `right`, `bottom` and `left`. Use a `null`\nvalue to “skip” an edge of the box.\n\n",
        "context": {
          "type": "mixin",
          "name": "position",
          "code": "\n  $box-edge-values: _unpack-shorthand($box-edge-values);\n  $offsets: (\n    \"top\": nth($box-edge-values, 1),\n    \"right\": nth($box-edge-values, 2),\n    \"bottom\": nth($box-edge-values, 3),\n    \"left\": nth($box-edge-values, 4),\n  );\n\n  position: $position;\n\n  @each $offset, $value in $offsets {\n    @if _is-length($value) {\n      #{$offset}: $value;\n    }\n  }\n",
          "line": {
            "start": 43,
            "end": 62
          }
        }
      },
      {
        "description": "Checks for a valid CSS size.\n\n",
        "context": {
          "type": "function",
          "name": "_is-size",
          "code": "\n  @return _is-length($value)\n    or _contains(\"fill\" \"fit-content\" \"min-content\" \"max-content\", $value);\n",
          "line": {
            "start": 15,
            "end": 18
          }
        }
      }
    ]
  },
  {
    "description": "Checks for a valid number.\n\n",
    "commentRange": {
      "start": 3,
      "end": 11
    },
    "context": {
      "type": "function",
      "name": "_is-number",
      "code": "\n  @return _contains(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" 0 1 2 3 4 5 6 7 8 9, $value);\n",
      "line": {
        "start": 13,
        "end": 15
      }
    },
    "parameter": [
      {
        "type": "number",
        "name": "value"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "_contains",
        "external": false
      }
    ],
    "return": {
      "type": "boolean"
    },
    "access": "private",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/validators/_is-number.scss",
      "name": "_is-number.scss"
    }
  },
  {
    "description": "Checks for a valid CSS size.\n\n",
    "commentRange": {
      "start": 3,
      "end": 13
    },
    "context": {
      "type": "function",
      "name": "_is-size",
      "code": "\n  @return _is-length($value)\n    or _contains(\"fill\" \"fit-content\" \"min-content\" \"max-content\", $value);\n",
      "line": {
        "start": 15,
        "end": 18
      }
    },
    "parameter": [
      {
        "type": "string",
        "name": "value"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "require": [
      {
        "type": "function",
        "name": "_contains",
        "external": false
      },
      {
        "type": "function",
        "name": "_is-length",
        "external": false
      }
    ],
    "access": "private",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "bourbon/validators/_is-size.scss",
      "name": "_is-size.scss"
    },
    "usedBy": [
      {
        "description": "Sets the `width` and `height` of the element in one statement.\n\n",
        "context": {
          "type": "mixin",
          "name": "size",
          "code": "\n  @if _is-size($height) {\n    height: $height;\n  } @else {\n    @error \"`#{$height}` is not a valid length for the `$height` argument \" +\n      \"in the `size` mixin.\";\n  }\n\n  @if _is-size($width) {\n    width: $width;\n  } @else {\n    @error \"`#{$width}` is not a valid length for the `$width` argument \" +\n      \"in the `size` mixin.\";\n  }\n",
          "line": {
            "start": 33,
            "end": 50
          }
        }
      }
    ]
  }
]
