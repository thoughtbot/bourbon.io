[
  {
    "description": "Provides a quick method for targeting `border-color` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
    "commentRange": {
      "start": 3,
      "end": 22
    },
    "context": {
      "type": "mixin",
      "name": "border-color",
      "code": "\n  @include directional-property(border, color, $vals...);\n",
      "line": {
        "start": 24,
        "end": 26
      }
    },
    "parameter": [
      {
        "type": "Arglist",
        "name": "vals",
        "description": "List of arguments\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  .element {\n    @include border-color(#a60b55 #76cd9c null #e8ae1a);\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  .element {\n    border-left-color: #e8ae1a;\n    border-right-color: #76cd9c;\n    border-top-color: #a60b55;\n  }",
        "description": "CSS Output"
      }
    ],
    "require": [
      {
        "type": "mixin",
        "name": "directional-property",
        "external": false
      }
    ],
    "output": "`border-color`",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_border-color.scss",
      "name": "_border-color.scss"
    }
  },
  {
    "description": "Provides a quick method for targeting `border-radius` on both corners on the side of a box.\n\n",
    "commentRange": {
      "start": 3,
      "end": 28
    },
    "context": {
      "type": "mixin",
      "name": "border-top-radius",
      "code": "\n  border-top-left-radius: $radii;\n  border-top-right-radius: $radii;\n",
      "line": {
        "start": 30,
        "end": 33
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "radii",
        "description": "List of arguments\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  .element-one {\n    @include border-top-radius(5px);\n  }\n\n  .element-two {\n    @include border-left-radius(3px);\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  .element-one {\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n  }\n\n  .element-two {\n    border-bottom-left-radius: 3px;\n    border-top-left-radius: 3px;\n  }",
        "description": "CSS Output"
      }
    ],
    "output": "`border-radius`",
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "addons/_border-radius.scss",
      "name": "_border-radius.scss"
    }
  },
  {
    "description": "Provides a quick method for targeting `border-style` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
    "commentRange": {
      "start": 3,
      "end": 21
    },
    "context": {
      "type": "mixin",
      "name": "border-style",
      "code": "\n  @include directional-property(border, style, $vals...);\n",
      "line": {
        "start": 23,
        "end": 25
      }
    },
    "parameter": [
      {
        "type": "Arglist",
        "name": "vals",
        "description": "List of arguments\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  .element {\n    @include border-style(dashed null solid);\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  .element {\n    border-bottom-style: solid;\n    border-top-style: dashed;\n  }",
        "description": "CSS Output"
      }
    ],
    "require": [
      {
        "type": "mixin",
        "name": "directional-property",
        "external": false
      }
    ],
    "output": "`border-style`",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_border-style.scss",
      "name": "_border-style.scss"
    }
  },
  {
    "description": "Provides a quick method for targeting `border-width` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
    "commentRange": {
      "start": 3,
      "end": 21
    },
    "context": {
      "type": "mixin",
      "name": "border-width",
      "code": "\n  @include directional-property(border, width, $vals...);\n",
      "line": {
        "start": 23,
        "end": 25
      }
    },
    "parameter": [
      {
        "type": "Arglist",
        "name": "vals",
        "description": "List of arguments\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  .element {\n    @include border-width(1em null 20px);\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  .element {\n    border-bottom-width: 20px;\n    border-top-width: 1em;\n  }",
        "description": "CSS Output"
      }
    ],
    "require": [
      {
        "type": "mixin",
        "name": "directional-property",
        "external": false
      }
    ],
    "output": "`border-width`",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_border-width.scss",
      "name": "_border-width.scss"
    }
  },
  {
    "description": "Generates variables for all buttons. Please note that you must use interpolation on the variable: `#{$all-buttons}`.\n\n",
    "commentRange": {
      "start": 3,
      "end": 49
    },
    "context": {
      "type": "variable",
      "name": "buttons-list",
      "value": "'button',\n               'input[type=\"button\"]',\n               'input[type=\"reset\"]',\n               'input[type=\"submit\"]'",
      "scope": "private",
      "line": {
        "start": 51,
        "end": 54
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "  #{$all-buttons} {\n    background-color: #f00;\n  }\n\n  #{$all-buttons-focus},\n  #{$all-buttons-hover} {\n    background-color: #0f0;\n  }\n\n  #{$all-buttons-active} {\n    background-color: #00f;\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  button,\n  input[type=\"button\"],\n  input[type=\"reset\"],\n  input[type=\"submit\"] {\n    background-color: #f00;\n  }\n\n  button:focus,\n  input[type=\"button\"]:focus,\n  input[type=\"reset\"]:focus,\n  input[type=\"submit\"]:focus,\n  button:hover,\n  input[type=\"button\"]:hover,\n  input[type=\"reset\"]:hover,\n  input[type=\"submit\"]:hover {\n    background-color: #0f0;\n  }\n\n  button:active,\n  input[type=\"button\"]:active,\n  input[type=\"reset\"]:active,\n  input[type=\"submit\"]:active {\n    background-color: #00f;\n  }",
        "description": "CSS Output"
      }
    ],
    "require": [],
    "type": "List",
    "todo": [
      "Remove double assigned variables (Lines 59–62) in v5.0.0"
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_buttons.scss",
      "name": "_buttons.scss"
    }
  },
  {
    "description": "Provides an easy way to include a clearfix for containing floats.\n\n",
    "commentRange": {
      "start": 3,
      "end": 17
    },
    "context": {
      "type": "mixin",
      "name": "clearfix",
      "code": "\n  &::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n",
      "line": {
        "start": 19,
        "end": 25
      }
    },
    "link": [
      {
        "url": "http://cssmojo.com/latest_new_clearfix_so_far/",
        "caption": ""
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  .element {\n    @include clearfix;\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  .element::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }",
        "description": "CSS Output"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_clearfix.scss",
      "name": "_clearfix.scss"
    }
  },
  {
    "description": "Truncates text and adds an ellipsis to represent overflow.\n\n",
    "commentRange": {
      "start": 3,
      "end": 21
    },
    "context": {
      "type": "mixin",
      "name": "ellipsis",
      "code": "\n  display: inline-block;\n  max-width: $width;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  word-wrap: normal;\n",
      "line": {
        "start": 23,
        "end": 30
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "width",
        "default": "100%",
        "description": "Max-width for the string to respect before being truncated\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  .element {\n    @include ellipsis;\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  .element {\n    display: inline-block;\n    max-width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    word-wrap: normal;\n  }",
        "description": "CSS Output"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "addons/_ellipsis.scss",
      "name": "_ellipsis.scss"
    }
  },
  {
    "description": "Georgia font stack.\n\n",
    "commentRange": {
      "start": 3,
      "end": 5
    },
    "context": {
      "type": "variable",
      "name": "georgia",
      "value": "\"Georgia\", \"Cambria\", \"Times New Roman\", \"Times\", serif",
      "scope": "private",
      "line": {
        "start": 7,
        "end": 7
      }
    },
    "type": "List",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_font-stacks.scss",
      "name": "_font-stacks.scss"
    }
  },
  {
    "description": "Helvetica font stack.\n\n",
    "commentRange": {
      "start": 9,
      "end": 11
    },
    "context": {
      "type": "variable",
      "name": "helvetica",
      "value": "\"Helvetica Neue\", \"Helvetica\", \"Roboto\", \"Arial\", sans-serif",
      "scope": "private",
      "line": {
        "start": 13,
        "end": 13
      }
    },
    "type": "List",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_font-stacks.scss",
      "name": "_font-stacks.scss"
    }
  },
  {
    "description": "Lucida Grande font stack.\n\n",
    "commentRange": {
      "start": 15,
      "end": 17
    },
    "context": {
      "type": "variable",
      "name": "lucida-grande",
      "value": "\"Lucida Grande\", \"Tahoma\", \"Verdana\", \"Arial\", sans-serif",
      "scope": "private",
      "line": {
        "start": 19,
        "end": 19
      }
    },
    "type": "List",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_font-stacks.scss",
      "name": "_font-stacks.scss"
    }
  },
  {
    "description": "Monospace font stack.\n\n",
    "commentRange": {
      "start": 21,
      "end": 23
    },
    "context": {
      "type": "variable",
      "name": "monospace",
      "value": "\"Bitstream Vera Sans Mono\", \"Consolas\", \"Courier\", monospace",
      "scope": "private",
      "line": {
        "start": 25,
        "end": 25
      }
    },
    "type": "List",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_font-stacks.scss",
      "name": "_font-stacks.scss"
    }
  },
  {
    "description": "Verdana font stack.\n\n",
    "commentRange": {
      "start": 27,
      "end": 29
    },
    "context": {
      "type": "variable",
      "name": "verdana",
      "value": "\"Verdana\", \"Geneva\", sans-serif",
      "scope": "private",
      "line": {
        "start": 31,
        "end": 31
      }
    },
    "type": "List",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_font-stacks.scss",
      "name": "_font-stacks.scss"
    }
  },
  {
    "description": "Hides the text in an element, commonly used to show an image. Some elements will need block-level styles applied.\n\n",
    "commentRange": {
      "start": 1,
      "end": 17
    },
    "context": {
      "type": "mixin",
      "name": "hide-text",
      "code": "\n  overflow: hidden;\n  text-indent: 101%;\n  white-space: nowrap;\n\n  @if $height {\n    @warn \"The `hide-text` mixin has changed and no longer requires a height. The height argument will no longer be accepted in v5.0.0\";\n  }\n",
      "line": {
        "start": 19,
        "end": 27
      }
    },
    "link": [
      {
        "url": "http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement",
        "caption": ""
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  .element {\n    @include hide-text;\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  .element {\n    overflow: hidden;\n    text-indent: 101%;\n    white-space: nowrap;\n  }",
        "description": "CSS Output"
      }
    ],
    "todo": [
      "Remove height argument in v5.0.0"
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "addons/_hide-text.scss",
      "name": "_hide-text.scss"
    }
  },
  {
    "description": "Provides a quick method for targeting `margin` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
    "commentRange": {
      "start": 3,
      "end": 22
    },
    "context": {
      "type": "mixin",
      "name": "margin",
      "code": "\n  @include directional-property(margin, false, $vals...);\n",
      "line": {
        "start": 24,
        "end": 26
      }
    },
    "parameter": [
      {
        "type": "Arglist",
        "name": "vals",
        "description": "List of arguments\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  .element {\n    @include margin(null 10px 3em 20vh);\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  .element {\n    margin-bottom: 3em;\n    margin-left: 20vh;\n    margin-right: 10px;\n  }",
        "description": "CSS Output"
      }
    ],
    "require": [
      {
        "type": "mixin",
        "name": "directional-property",
        "external": false
      }
    ],
    "output": "`margin`",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_margin.scss",
      "name": "_margin.scss"
    }
  },
  {
    "description": "Provides a quick method for targeting `padding` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
    "commentRange": {
      "start": 3,
      "end": 22
    },
    "context": {
      "type": "mixin",
      "name": "padding",
      "code": "\n  @include directional-property(padding, false, $vals...);\n",
      "line": {
        "start": 24,
        "end": 26
      }
    },
    "parameter": [
      {
        "type": "Arglist",
        "name": "vals",
        "description": "List of arguments\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  .element {\n    @include padding(12vh null 10px 5%);\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  .element {\n    padding-bottom: 10px;\n    padding-left: 5%;\n    padding-top: 12vh;\n  }",
        "description": "CSS Output"
      }
    ],
    "require": [
      {
        "type": "mixin",
        "name": "directional-property",
        "external": false
      }
    ],
    "output": "`padding`",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_padding.scss",
      "name": "_padding.scss"
    }
  },
  {
    "description": "Provides a quick method for setting an element’s position. Use a `null` value to “skip” a side.\n\n",
    "commentRange": {
      "start": 3,
      "end": 24
    },
    "context": {
      "type": "mixin",
      "name": "position",
      "code": "\n  @if type-of($position) == list {\n    $coordinates: $position;\n    $position: relative;\n  }\n\n  $coordinates: unpack($coordinates);\n\n  $offsets: (\n    top:    nth($coordinates, 1),\n    right:  nth($coordinates, 2),\n    bottom: nth($coordinates, 3),\n    left:   nth($coordinates, 4)\n  );\n\n  position: $position;\n\n  @each $offset, $value in $offsets {\n    @if is-length($value) {\n      #{$offset}: $value;\n    }\n  }\n",
      "line": {
        "start": 26,
        "end": 48
      }
    },
    "parameter": [
      {
        "type": "Position",
        "name": "position",
        "default": "relative",
        "description": "A CSS position value\n"
      },
      {
        "type": "Arglist",
        "name": "coordinates",
        "default": "null null null null",
        "description": "List of values that correspond to the 4-value syntax for the edges of a box\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  .element {\n    @include position(absolute, 0 null null 10em);\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  .element {\n    left: 10em;\n    position: absolute;\n    top: 0;\n  }",
        "description": "CSS Output"
      }
    ],
    "require": [
      {
        "type": "variable",
        "name": "position"
      },
      {
        "type": "function",
        "name": "is-length",
        "external": false
      },
      {
        "type": "function",
        "name": "unpack",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_position.scss",
      "name": "_position.scss"
    },
    "usedBy": [
      {
        "description": "Provides a quick method for setting an element’s position. Use a `null` value to “skip” a side.\n\n",
        "context": {
          "type": "mixin",
          "name": "position",
          "code": "\n  @if type-of($position) == list {\n    $coordinates: $position;\n    $position: relative;\n  }\n\n  $coordinates: unpack($coordinates);\n\n  $offsets: (\n    top:    nth($coordinates, 1),\n    right:  nth($coordinates, 2),\n    bottom: nth($coordinates, 3),\n    left:   nth($coordinates, 4)\n  );\n\n  position: $position;\n\n  @each $offset, $value in $offsets {\n    @if is-length($value) {\n      #{$offset}: $value;\n    }\n  }\n",
          "line": {
            "start": 26,
            "end": 48
          }
        }
      }
    ]
  },
  {
    "description": "A mixin for generating vendor prefixes on non-standardized properties.\n\n",
    "commentRange": {
      "start": 3,
      "end": 30
    },
    "context": {
      "type": "mixin",
      "name": "prefixer",
      "code": "\n  @each $prefix in $prefixes {\n    @if $prefix == webkit {\n      @if $prefix-for-webkit {\n        -webkit-#{$property}: $value;\n      }\n    } @else if $prefix == moz {\n      @if $prefix-for-mozilla {\n        -moz-#{$property}: $value;\n      }\n    } @else if $prefix == ms {\n      @if $prefix-for-microsoft {\n        -ms-#{$property}: $value;\n      }\n    } @else if $prefix == o {\n      @if $prefix-for-opera {\n        -o-#{$property}: $value;\n      }\n    } @else if $prefix == spec {\n      @if $prefix-for-spec {\n        #{$property}: $value;\n      }\n    } @else  {\n      @warn \"Unrecognized prefix: #{$prefix}\";\n    }\n  }\n",
      "line": {
        "start": 32,
        "end": 58
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "property",
        "description": "Property to prefix\n"
      },
      {
        "type": "*",
        "name": "value",
        "description": "Value to use\n"
      },
      {
        "type": "List",
        "name": "prefixes",
        "description": "Prefixes to define\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  .element {\n    @include prefixer(border-radius, 10px, webkit ms spec);\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  .element {\n    -webkit-border-radius: 10px;\n    -moz-border-radius: 10px;\n    border-radius: 10px;\n  }",
        "description": "CSS Output"
      }
    ],
    "require": [
      {
        "type": "variable",
        "name": "prefix-for-webkit",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_prefixer.scss",
      "name": "_prefixer.scss"
    }
  },
  {
    "description": "Sets the `width` and `height` of the element.\n\n",
    "commentRange": {
      "start": 3,
      "end": 30
    },
    "context": {
      "type": "mixin",
      "name": "size",
      "code": "\n  $width: nth($value, 1);\n  $height: $width;\n\n  @if length($value) > 1 {\n    $height: nth($value, 2);\n  }\n\n  @if is-size($height) {\n    height: $height;\n  }\n\n  @else {\n    @warn \"`#{$height}` is not a valid length for the `$height` parameter in the `size` mixin.\";\n  }\n\n  @if is-size($width) {\n    width: $width;\n  }\n\n  @else {\n    @warn \"`#{$width}` is not a valid length for the `$width` parameter in the `size` mixin.\";\n  }\n",
      "line": {
        "start": 32,
        "end": 55
      }
    },
    "parameter": [
      {
        "type": "List",
        "name": "size",
        "description": "A list of at most 2 size values.\n\n  If there is only a single value in `$size` it is used for both width and height. All units are supported.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  .first-element {\n    @include size(2em);\n  }\n\n  .second-element {\n    @include size(auto 10em);\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  .first-element {\n    width: 2em;\n    height: 2em;\n  }\n\n  .second-element {\n    width: auto;\n    height: 10em;\n  }",
        "description": "CSS Output"
      }
    ],
    "todo": [
      "Refactor in 5.0.0 to use a comma-separated argument"
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "function",
        "name": "is-size"
      }
    ],
    "file": {
      "path": "addons/_size.scss",
      "name": "_size.scss"
    }
  },
  {
    "description": "Generates variables for all text-based inputs. Please note that you must use interpolation on the variable: `#{$all-text-inputs}`.\n\n",
    "commentRange": {
      "start": 3,
      "end": 91
    },
    "context": {
      "type": "variable",
      "name": "text-inputs-list",
      "value": "'input[type=\"color\"]',\n                   'input[type=\"date\"]',\n                   'input[type=\"datetime\"]',\n                   'input[type=\"datetime-local\"]',\n                   'input[type=\"email\"]',\n                   'input[type=\"month\"]',\n                   'input[type=\"number\"]',\n                   'input[type=\"password\"]',\n                   'input[type=\"search\"]',\n                   'input[type=\"tel\"]',\n                   'input[type=\"text\"]',\n                   'input[type=\"time\"]',\n                   'input[type=\"url\"]',\n                   'input[type=\"week\"]',\n                   'textarea'",
      "scope": "private",
      "line": {
        "start": 93,
        "end": 107
      }
    },
    "example": [
      {
        "type": "scss",
        "code": "  #{$all-text-inputs} {\n    border: 1px solid #f00;\n  }\n\n  #{$all-text-inputs-focus},\n  #{$all-text-inputs-hover} {\n    border: 1px solid #0f0;\n  }\n\n  #{$all-text-inputs-active} {\n    border: 1px solid #00f;\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  input[type=\"color\"],\n  input[type=\"date\"],\n  input[type=\"datetime\"],\n  input[type=\"datetime-local\"],\n  input[type=\"email\"],\n  input[type=\"month\"],\n  input[type=\"number\"],\n  input[type=\"password\"],\n  input[type=\"search\"],\n  input[type=\"tel\"],\n  input[type=\"text\"],\n  input[type=\"time\"],\n  input[type=\"url\"],\n  input[type=\"week\"],\n  textarea {\n    border: 1px solid #f00;\n  }\n\n  input[type=\"color\"]:focus,\n  input[type=\"date\"]:focus,\n  input[type=\"datetime\"]:focus,\n  input[type=\"datetime-local\"]:focus,\n  input[type=\"email\"]:focus,\n  input[type=\"month\"]:focus,\n  input[type=\"number\"]:focus,\n  input[type=\"password\"]:focus,\n  input[type=\"search\"]:focus,\n  input[type=\"tel\"]:focus,\n  input[type=\"text\"]:focus,\n  input[type=\"time\"]:focus,\n  input[type=\"url\"]:focus,\n  input[type=\"week\"]:focus,\n  textarea:focus,\n  input[type=\"color\"]:hover,\n  input[type=\"date\"]:hover,\n  input[type=\"datetime\"]:hover,\n  input[type=\"datetime-local\"]:hover,\n  input[type=\"email\"]:hover,\n  input[type=\"month\"]:hover,\n  input[type=\"number\"]:hover,\n  input[type=\"password\"]:hover,\n  input[type=\"search\"]:hover,\n  input[type=\"tel\"]:hover,\n  input[type=\"text\"]:hover,\n  input[type=\"time\"]:hover,\n  input[type=\"url\"]:hover,\n  input[type=\"week\"]:hover,\n  textarea:hover {\n    border: 1px solid #0f0;\n  }\n\n  input[type=\"color\"]:active,\n  input[type=\"date\"]:active,\n  input[type=\"datetime\"]:active,\n  input[type=\"datetime-local\"]:active,\n  input[type=\"email\"]:active,\n  input[type=\"month\"]:active,\n  input[type=\"number\"]:active,\n  input[type=\"password\"]:active,\n  input[type=\"search\"]:active,\n  input[type=\"tel\"]:active,\n  input[type=\"text\"]:active,\n  input[type=\"time\"]:active,\n  input[type=\"url\"]:active,\n  input[type=\"week\"]:active,\n  textarea:active {\n    border: 1px solid #00f;\n  }",
        "description": "CSS Output"
      }
    ],
    "require": [],
    "type": "List",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_text-inputs.scss",
      "name": "_text-inputs.scss"
    }
  },
  {
    "description": "CSS cubic-bezier timing functions. Timing functions courtesy of jquery.easie (github.com/jaukia/easie)\n\nTiming functions are the same as demoed here: http://jqueryui.com/resources/demos/effect/easing.html\n\n",
    "commentRange": {
      "start": 3,
      "end": 7
    },
    "context": {
      "type": "variable",
      "name": "ease-in-quad",
      "value": "cubic-bezier(0.550,  0.085, 0.680, 0.530)",
      "scope": "private",
      "line": {
        "start": 9,
        "end": 9
      }
    },
    "type": "cubic-bezier",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "addons/_timing-functions.scss",
      "name": "_timing-functions.scss"
    }
  },
  {
    "description": "Provides an easy way to change the `word-wrap` property.\n\n",
    "commentRange": {
      "start": 3,
      "end": 18
    },
    "context": {
      "type": "mixin",
      "name": "word-wrap",
      "code": "\n  overflow-wrap: $wrap;\n  word-wrap: $wrap;\n\n  @if $wrap == break-word {\n    word-break: break-all;\n  } @else {\n    word-break: $wrap;\n  }\n",
      "line": {
        "start": 20,
        "end": 29
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "wrap",
        "default": "break-word",
        "description": "Value for the `word-break` property.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  .wrapper {\n    @include word-wrap(break-word);\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  .wrapper {\n    overflow-wrap: break-word;\n    word-break: break-all;\n    word-wrap: break-word;\n  }",
        "description": "CSS Output"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "addons/_word-wrap.scss",
      "name": "_word-wrap.scss"
    }
  },
  {
    "description": "Outputs the spec and prefixed versions of the `::selection` pseudo-element.\n\n",
    "commentRange": {
      "start": 3,
      "end": 22
    },
    "context": {
      "type": "mixin",
      "name": "selection",
      "code": "\n  @if $current-selector {\n    &::-moz-selection {\n      @content;\n    }\n\n    &::selection {\n      @content;\n    }\n  } @else {\n    ::-moz-selection {\n      @content;\n    }\n\n    ::selection {\n      @content;\n    }\n  }\n",
      "line": {
        "start": 24,
        "end": 42
      }
    },
    "parameter": [
      {
        "type": "Bool",
        "name": "current-selector",
        "default": "false",
        "description": "If set to `true`, it takes the current element into consideration.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  .element {\n    @include selection(true) {\n      background-color: #ffbb52;\n    }\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  .element::-moz-selection {\n    background-color: #ffbb52;\n  }\n\n  .element::selection {\n    background-color: #ffbb52;\n  }",
        "description": "CSS Output"
      }
    ],
    "access": "public",
    "content": "",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "css3/_selection.scss",
      "name": "_selection.scss"
    }
  },
  {
    "description": "Checks if a list does not contains a value.\n\n",
    "commentRange": {
      "start": 3,
      "end": 10
    },
    "context": {
      "type": "function",
      "name": "contains-falsy",
      "code": "\n  @each $item in $list {\n    @if not $item {\n      @return true;\n    }\n  }\n\n  @return false;\n",
      "line": {
        "start": 12,
        "end": 20
      }
    },
    "access": "private",
    "parameter": [
      {
        "type": "List",
        "name": "list",
        "description": "The list to check against.\n"
      }
    ],
    "return": {
      "type": "Bool"
    },
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "functions/_contains-falsy.scss",
      "name": "_contains-falsy.scss"
    },
    "usedBy": [
      {
        "description": "Directional-property mixins are shorthands for writing properties like the following\n\n",
        "context": {
          "type": "function",
          "name": "collapse-directionals",
          "code": "\n  $output: null;\n\n  $a: nth($vals, 1);\n  $b: if(length($vals) < 2, $a, nth($vals, 2));\n  $c: if(length($vals) < 3, $a, nth($vals, 3));\n  $d: if(length($vals) < 2, $a, nth($vals, if(length($vals) < 4, 2, 4)));\n\n  @if $a == 0 { $a: 0; }\n  @if $b == 0 { $b: 0; }\n  @if $c == 0 { $c: 0; }\n  @if $d == 0 { $d: 0; }\n\n  @if $a == $b and $a == $c and $a == $d { $output: $a;          }\n  @else if $a == $c and $b == $d         { $output: $a $b;       }\n  @else if $b == $d                      { $output: $a $b $c;    }\n  @else                                  { $output: $a $b $c $d; }\n\n  @return $output;\n",
          "line": {
            "start": 29,
            "end": 48
          }
        }
      },
      {
        "description": "Output directional properties, for instance `margin`.\n\n",
        "context": {
          "type": "mixin",
          "name": "directional-property",
          "code": "\n  // Property Names\n  $top:    $pre + \"-top\"    + if($suf, \"-#{$suf}\", \"\");\n  $bottom: $pre + \"-bottom\" + if($suf, \"-#{$suf}\", \"\");\n  $left:   $pre + \"-left\"   + if($suf, \"-#{$suf}\", \"\");\n  $right:  $pre + \"-right\"  + if($suf, \"-#{$suf}\", \"\");\n  $all:    $pre +             if($suf, \"-#{$suf}\", \"\");\n\n  $vals: collapse-directionals($vals);\n\n  @if contains-falsy($vals) {\n    @if nth($vals, 1) { #{$top}: nth($vals, 1); }\n\n    @if length($vals) == 1 {\n      @if nth($vals, 1) { #{$right}: nth($vals, 1); }\n    } @else {\n      @if nth($vals, 2) { #{$right}: nth($vals, 2); }\n    }\n\n    @if length($vals) == 2 {\n      @if nth($vals, 1) { #{$bottom}: nth($vals, 1); }\n      @if nth($vals, 2) { #{$left}:   nth($vals, 2); }\n    } @else if length($vals) == 3 {\n      @if nth($vals, 3) { #{$bottom}: nth($vals, 3); }\n      @if nth($vals, 2) { #{$left}:   nth($vals, 2); }\n    } @else if length($vals) == 4 {\n      @if nth($vals, 3) { #{$bottom}: nth($vals, 3); }\n      @if nth($vals, 4) { #{$left}:   nth($vals, 4); }\n    }\n  } @else {\n    #{$all}: $vals;\n  }\n",
          "line": {
            "start": 64,
            "end": 96
          }
        }
      }
    ]
  },
  {
    "description": "Checks if a list contains a value(s).\n\n",
    "commentRange": {
      "start": 3,
      "end": 16
    },
    "context": {
      "type": "function",
      "name": "contains",
      "code": "\n  @each $value in $values {\n    @if type-of(index($list, $value)) != \"number\" {\n      @return false;\n    }\n  }\n\n  @return true;\n",
      "line": {
        "start": 18,
        "end": 26
      }
    },
    "access": "private",
    "parameter": [
      {
        "type": "List",
        "name": "list",
        "description": "The list to check against.\n"
      },
      {
        "type": "List",
        "name": "values",
        "description": "A single value or list of values to check for.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  contains($list, $value)",
        "description": "Usage"
      }
    ],
    "return": {
      "type": "Bool"
    },
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "functions/_contains.scss",
      "name": "_contains.scss"
    },
    "usedBy": [
      {
        "description": "Checks for a valid number.\n\n",
        "context": {
          "type": "function",
          "name": "is-number",
          "code": "\n  @return contains(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" 0 1 2 3 4 5 6 7 8 9, $value);\n",
          "line": {
            "start": 9,
            "end": 11
          }
        }
      },
      {
        "description": "Checks for a valid CSS size.\n\n",
        "context": {
          "type": "function",
          "name": "is-size",
          "code": "\n  @return is-length($value)\n          or contains(\"fill\" \"fit-content\" \"min-content\" \"max-content\", $value);\n",
          "line": {
            "start": 10,
            "end": 13
          }
        }
      }
    ]
  },
  {
    "description": "Checks for a valid CSS length.\n\n",
    "commentRange": {
      "start": 3,
      "end": 5
    },
    "context": {
      "type": "function",
      "name": "is-length",
      "code": "\n  @return type-of($value) != \"null\" and (str-slice($value + \"\", 1, 4) == 'calc'\n       or index(auto inherit initial 0, $value)\n       or (type-of($value) == \"number\" and not(unitless($value))));\n",
      "line": {
        "start": 7,
        "end": 11
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "value"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "functions/_is-length.scss",
      "name": "_is-length.scss"
    },
    "usedBy": [
      {
        "description": "Provides a quick method for setting an element’s position. Use a `null` value to “skip” a side.\n\n",
        "context": {
          "type": "mixin",
          "name": "position",
          "code": "\n  @if type-of($position) == list {\n    $coordinates: $position;\n    $position: relative;\n  }\n\n  $coordinates: unpack($coordinates);\n\n  $offsets: (\n    top:    nth($coordinates, 1),\n    right:  nth($coordinates, 2),\n    bottom: nth($coordinates, 3),\n    left:   nth($coordinates, 4)\n  );\n\n  position: $position;\n\n  @each $offset, $value in $offsets {\n    @if is-length($value) {\n      #{$offset}: $value;\n    }\n  }\n",
          "line": {
            "start": 26,
            "end": 48
          }
        }
      },
      {
        "description": "Checks for a valid CSS size.\n\n",
        "context": {
          "type": "function",
          "name": "is-size",
          "code": "\n  @return is-length($value)\n          or contains(\"fill\" \"fit-content\" \"min-content\" \"max-content\", $value);\n",
          "line": {
            "start": 10,
            "end": 13
          }
        }
      }
    ]
  },
  {
    "description": "Programatically determines whether a color is light or dark.\n\n",
    "commentRange": {
      "start": 3,
      "end": 12
    },
    "context": {
      "type": "function",
      "name": "is-light",
      "code": "\n  $-local-red: red(rgba($hex-color, 1));\n  $-local-green: green(rgba($hex-color, 1));\n  $-local-blue: blue(rgba($hex-color, 1));\n  $-local-lightness: ($-local-red * 0.2126 + $-local-green * 0.7152 + $-local-blue * 0.0722) / 255;\n\n  @return $-local-lightness > 0.6;\n",
      "line": {
        "start": 14,
        "end": 21
      }
    },
    "link": [
      {
        "url": "http://robots.thoughtbot.com/closer-look-color-lightness",
        "caption": ""
      }
    ],
    "parameter": [
      {
        "type": "Color (Hex)",
        "name": "color"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  is-light($color)",
        "description": "Usage"
      }
    ],
    "return": {
      "type": "Bool"
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "functions/_is-light.scss",
      "name": "_is-light.scss"
    }
  },
  {
    "description": "Checks for a valid number.\n\n",
    "commentRange": {
      "start": 3,
      "end": 7
    },
    "context": {
      "type": "function",
      "name": "is-number",
      "code": "\n  @return contains(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" 0 1 2 3 4 5 6 7 8 9, $value);\n",
      "line": {
        "start": 9,
        "end": 11
      }
    },
    "parameter": [
      {
        "type": "Number",
        "name": "value"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "contains",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "functions/_is-number.scss",
      "name": "_is-number.scss"
    }
  },
  {
    "description": "Checks for a valid CSS size.\n\n",
    "commentRange": {
      "start": 3,
      "end": 8
    },
    "context": {
      "type": "function",
      "name": "is-size",
      "code": "\n  @return is-length($value)\n          or contains(\"fill\" \"fit-content\" \"min-content\" \"max-content\", $value);\n",
      "line": {
        "start": 10,
        "end": 13
      }
    },
    "parameter": [
      {
        "type": "String",
        "name": "value"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "contains",
        "external": false
      },
      {
        "type": "function",
        "name": "is-length",
        "external": false
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "functions/_is-size.scss",
      "name": "_is-size.scss"
    },
    "usedBy": [
      {
        "description": "Sets the `width` and `height` of the element.\n\n",
        "context": {
          "type": "mixin",
          "name": "size",
          "code": "\n  $width: nth($value, 1);\n  $height: $width;\n\n  @if length($value) > 1 {\n    $height: nth($value, 2);\n  }\n\n  @if is-size($height) {\n    height: $height;\n  }\n\n  @else {\n    @warn \"`#{$height}` is not a valid length for the `$height` parameter in the `size` mixin.\";\n  }\n\n  @if is-size($width) {\n    width: $width;\n  }\n\n  @else {\n    @warn \"`#{$width}` is not a valid length for the `$width` parameter in the `size` mixin.\";\n  }\n",
          "line": {
            "start": 32,
            "end": 55
          }
        }
      }
    ]
  },
  {
    "description": "Mixes a color with black.\n\n",
    "commentRange": {
      "start": 3,
      "end": 20
    },
    "context": {
      "type": "function",
      "name": "shade",
      "code": "\n  @return mix(#000, $color, $percent);\n",
      "line": {
        "start": 22,
        "end": 24
      }
    },
    "parameter": [
      {
        "type": "Color",
        "name": "color"
      },
      {
        "type": "Number (Percentage)",
        "name": "percent",
        "description": "The amount of black to be mixed in.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  .element {\n    background-color: shade(#ffbb52, 60%);\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  .element {\n    background-color: #664a20;\n  }",
        "description": "CSS Output"
      }
    ],
    "return": {
      "type": "Color"
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "functions/_shade.scss",
      "name": "_shade.scss"
    }
  },
  {
    "description": "Strips the unit from a number.\n\n",
    "commentRange": {
      "start": 3,
      "end": 13
    },
    "context": {
      "type": "function",
      "name": "strip-units",
      "code": "\n  @return ($value / ($value * 0 + 1));\n",
      "line": {
        "start": 15,
        "end": 17
      }
    },
    "parameter": [
      {
        "type": "Number (With Unit)",
        "name": "value"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  $dimension: strip-units(10em);",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  $dimension: 10;",
        "description": "CSS Output"
      }
    ],
    "return": {
      "type": "Number (Unitless)"
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "functions/_strip-units.scss",
      "name": "_strip-units.scss"
    }
  },
  {
    "description": "Mixes a color with white.\n\n",
    "commentRange": {
      "start": 3,
      "end": 20
    },
    "context": {
      "type": "function",
      "name": "tint",
      "code": "\n  @return mix(#fff, $color, $percent);\n",
      "line": {
        "start": 22,
        "end": 24
      }
    },
    "parameter": [
      {
        "type": "Color",
        "name": "color"
      },
      {
        "type": "Number (Percentage)",
        "name": "percent",
        "description": "The amount of white to be mixed in.\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  .element {\n    background-color: tint(#6ecaa6, 40%);\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  .element {\n    background-color: #a8dfc9;\n  }",
        "description": "CSS Output"
      }
    ],
    "return": {
      "type": "Color"
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "functions/_tint.scss",
      "name": "_tint.scss"
    }
  },
  {
    "description": "Converts shorthand to the 4-value syntax.\n\n",
    "commentRange": {
      "start": 3,
      "end": 15
    },
    "context": {
      "type": "function",
      "name": "unpack",
      "code": "\n  @if length($shorthand) == 1 {\n    @return nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1);\n  } @else if length($shorthand) == 2 {\n    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 1) nth($shorthand, 2);\n  } @else if length($shorthand) == 3 {\n    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 3) nth($shorthand, 2);\n  } @else {\n    @return $shorthand;\n  }\n",
      "line": {
        "start": 17,
        "end": 27
      }
    },
    "parameter": [
      {
        "type": "List",
        "name": "shorthand"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  .element {\n    margin: unpack(1em 2em);\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  .element {\n    margin: 1em 2em 1em 2em;\n  }",
        "description": "CSS Output"
      }
    ],
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "functions/_unpack.scss",
      "name": "_unpack.scss"
    },
    "usedBy": [
      {
        "description": "Provides a quick method for setting an element’s position. Use a `null` value to “skip” a side.\n\n",
        "context": {
          "type": "mixin",
          "name": "position",
          "code": "\n  @if type-of($position) == list {\n    $coordinates: $position;\n    $position: relative;\n  }\n\n  $coordinates: unpack($coordinates);\n\n  $offsets: (\n    top:    nth($coordinates, 1),\n    right:  nth($coordinates, 2),\n    bottom: nth($coordinates, 3),\n    left:   nth($coordinates, 4)\n  );\n\n  position: $position;\n\n  @each $offset, $value in $offsets {\n    @if is-length($value) {\n      #{$offset}: $value;\n    }\n  }\n",
          "line": {
            "start": 26,
            "end": 48
          }
        }
      }
    ]
  },
  {
    "description": "Directional-property mixins are shorthands for writing properties like the following\n\n",
    "commentRange": {
      "start": 3,
      "end": 27
    },
    "context": {
      "type": "function",
      "name": "collapse-directionals",
      "code": "\n  $output: null;\n\n  $a: nth($vals, 1);\n  $b: if(length($vals) < 2, $a, nth($vals, 2));\n  $c: if(length($vals) < 3, $a, nth($vals, 3));\n  $d: if(length($vals) < 2, $a, nth($vals, if(length($vals) < 4, 2, 4)));\n\n  @if $a == 0 { $a: 0; }\n  @if $b == 0 { $b: 0; }\n  @if $c == 0 { $c: 0; }\n  @if $d == 0 { $d: 0; }\n\n  @if $a == $b and $a == $c and $a == $d { $output: $a;          }\n  @else if $a == $c and $b == $d         { $output: $a $b;       }\n  @else if $b == $d                      { $output: $a $b $c;    }\n  @else                                  { $output: $a $b $c $d; }\n\n  @return $output;\n",
      "line": {
        "start": 29,
        "end": 48
      }
    },
    "ignore": [],
    "parameter": [
      {
        "type": "List",
        "name": "vals",
        "description": "List of directional values\n"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "  .element {\n    @include border-style(dotted null);\n    @include margin(null 0 10px);\n  }",
        "description": "Usage"
      },
      {
        "type": "css",
        "code": "  .element {\n    border-bottom-style: dotted;\n    border-top-style: dotted;\n    margin-bottom: 10px;\n    margin-left: 0;\n    margin-right: 0;\n  }",
        "description": "CSS Output"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "contains-falsy",
        "external": false
      }
    ],
    "return": {
      "type": "List"
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "helpers/_directional-values.scss",
      "name": "_directional-values.scss"
    },
    "usedBy": [
      {
        "description": "Output directional properties, for instance `margin`.\n\n",
        "context": {
          "type": "mixin",
          "name": "directional-property",
          "code": "\n  // Property Names\n  $top:    $pre + \"-top\"    + if($suf, \"-#{$suf}\", \"\");\n  $bottom: $pre + \"-bottom\" + if($suf, \"-#{$suf}\", \"\");\n  $left:   $pre + \"-left\"   + if($suf, \"-#{$suf}\", \"\");\n  $right:  $pre + \"-right\"  + if($suf, \"-#{$suf}\", \"\");\n  $all:    $pre +             if($suf, \"-#{$suf}\", \"\");\n\n  $vals: collapse-directionals($vals);\n\n  @if contains-falsy($vals) {\n    @if nth($vals, 1) { #{$top}: nth($vals, 1); }\n\n    @if length($vals) == 1 {\n      @if nth($vals, 1) { #{$right}: nth($vals, 1); }\n    } @else {\n      @if nth($vals, 2) { #{$right}: nth($vals, 2); }\n    }\n\n    @if length($vals) == 2 {\n      @if nth($vals, 1) { #{$bottom}: nth($vals, 1); }\n      @if nth($vals, 2) { #{$left}:   nth($vals, 2); }\n    } @else if length($vals) == 3 {\n      @if nth($vals, 3) { #{$bottom}: nth($vals, 3); }\n      @if nth($vals, 2) { #{$left}:   nth($vals, 2); }\n    } @else if length($vals) == 4 {\n      @if nth($vals, 3) { #{$bottom}: nth($vals, 3); }\n      @if nth($vals, 4) { #{$left}:   nth($vals, 4); }\n    }\n  } @else {\n    #{$all}: $vals;\n  }\n",
          "line": {
            "start": 64,
            "end": 96
          }
        }
      }
    ]
  },
  {
    "description": "Output directional properties, for instance `margin`.\n\n",
    "commentRange": {
      "start": 50,
      "end": 62
    },
    "context": {
      "type": "mixin",
      "name": "directional-property",
      "code": "\n  // Property Names\n  $top:    $pre + \"-top\"    + if($suf, \"-#{$suf}\", \"\");\n  $bottom: $pre + \"-bottom\" + if($suf, \"-#{$suf}\", \"\");\n  $left:   $pre + \"-left\"   + if($suf, \"-#{$suf}\", \"\");\n  $right:  $pre + \"-right\"  + if($suf, \"-#{$suf}\", \"\");\n  $all:    $pre +             if($suf, \"-#{$suf}\", \"\");\n\n  $vals: collapse-directionals($vals);\n\n  @if contains-falsy($vals) {\n    @if nth($vals, 1) { #{$top}: nth($vals, 1); }\n\n    @if length($vals) == 1 {\n      @if nth($vals, 1) { #{$right}: nth($vals, 1); }\n    } @else {\n      @if nth($vals, 2) { #{$right}: nth($vals, 2); }\n    }\n\n    @if length($vals) == 2 {\n      @if nth($vals, 1) { #{$bottom}: nth($vals, 1); }\n      @if nth($vals, 2) { #{$left}:   nth($vals, 2); }\n    } @else if length($vals) == 3 {\n      @if nth($vals, 3) { #{$bottom}: nth($vals, 3); }\n      @if nth($vals, 2) { #{$left}:   nth($vals, 2); }\n    } @else if length($vals) == 4 {\n      @if nth($vals, 3) { #{$bottom}: nth($vals, 3); }\n      @if nth($vals, 4) { #{$left}:   nth($vals, 4); }\n    }\n  } @else {\n    #{$all}: $vals;\n  }\n",
      "line": {
        "start": 64,
        "end": 96
      }
    },
    "access": "private",
    "parameter": [
      {
        "type": "String",
        "name": "pre",
        "description": "Prefix to use"
      },
      {
        "type": "String",
        "name": "suf",
        "description": "Suffix to use"
      },
      {
        "type": "List",
        "name": "vals",
        "description": "List of values\n"
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "collapse-directionals",
        "external": false
      },
      {
        "type": "function",
        "name": "contains-falsy",
        "external": false
      }
    ],
    "group": [
      "undefined"
    ],
    "file": {
      "path": "helpers/_directional-values.scss",
      "name": "_directional-values.scss"
    },
    "usedBy": [
      {
        "description": "Provides a quick method for targeting `border-color` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
        "context": {
          "type": "mixin",
          "name": "border-color",
          "code": "\n  @include directional-property(border, color, $vals...);\n",
          "line": {
            "start": 24,
            "end": 26
          }
        }
      },
      {
        "description": "Provides a quick method for targeting `border-style` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
        "context": {
          "type": "mixin",
          "name": "border-style",
          "code": "\n  @include directional-property(border, style, $vals...);\n",
          "line": {
            "start": 23,
            "end": 25
          }
        }
      },
      {
        "description": "Provides a quick method for targeting `border-width` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
        "context": {
          "type": "mixin",
          "name": "border-width",
          "code": "\n  @include directional-property(border, width, $vals...);\n",
          "line": {
            "start": 23,
            "end": 25
          }
        }
      },
      {
        "description": "Provides a quick method for targeting `margin` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
        "context": {
          "type": "mixin",
          "name": "margin",
          "code": "\n  @include directional-property(margin, false, $vals...);\n",
          "line": {
            "start": 24,
            "end": 26
          }
        }
      },
      {
        "description": "Provides a quick method for targeting `padding` on specific sides of a box. Use a `null` value to “skip” a side.\n\n",
        "context": {
          "type": "mixin",
          "name": "padding",
          "code": "\n  @include directional-property(padding, false, $vals...);\n",
          "line": {
            "start": 24,
            "end": 26
          }
        }
      }
    ]
  },
  {
    "description": "A global setting to enable or disable the `$asset-pipeline` variable for all functions that accept it.\n\n",
    "commentRange": {
      "start": 3,
      "end": 5
    },
    "context": {
      "type": "variable",
      "name": "asset-pipeline",
      "value": "false",
      "scope": "default",
      "line": {
        "start": 7,
        "end": 7
      }
    },
    "type": "Bool",
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "settings/_asset-pipeline.scss",
      "name": "_asset-pipeline.scss"
    }
  },
  {
    "description": "Global variables to enable or disable vendor prefixes\n",
    "commentRange": {
      "start": 3,
      "end": 3
    },
    "context": {
      "type": "variable",
      "name": "prefix-for-webkit",
      "value": "true",
      "scope": "default",
      "line": {
        "start": 5,
        "end": 5
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "settings/_prefixer.scss",
      "name": "_prefixer.scss"
    },
    "usedBy": [
      {
        "description": "A mixin for generating vendor prefixes on non-standardized properties.\n\n",
        "context": {
          "type": "mixin",
          "name": "prefixer",
          "code": "\n  @each $prefix in $prefixes {\n    @if $prefix == webkit {\n      @if $prefix-for-webkit {\n        -webkit-#{$property}: $value;\n      }\n    } @else if $prefix == moz {\n      @if $prefix-for-mozilla {\n        -moz-#{$property}: $value;\n      }\n    } @else if $prefix == ms {\n      @if $prefix-for-microsoft {\n        -ms-#{$property}: $value;\n      }\n    } @else if $prefix == o {\n      @if $prefix-for-opera {\n        -o-#{$property}: $value;\n      }\n    } @else if $prefix == spec {\n      @if $prefix-for-spec {\n        #{$property}: $value;\n      }\n    } @else  {\n      @warn \"Unrecognized prefix: #{$prefix}\";\n    }\n  }\n",
          "line": {
            "start": 32,
            "end": 58
          }
        }
      }
    ]
  }
]
